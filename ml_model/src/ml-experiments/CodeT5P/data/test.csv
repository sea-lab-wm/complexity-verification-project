developer_position,PE gen,PE spec (java),Cyclomatic complexity,IMSQ (min),MIDQ (min),AEDQ (min),EAP (min),IMSQ (avg),MIDQ (avg),AEDQ (avg),EAP (avg),IMSQ (max),MIDQ (max),AEDQ (max),EAP (max),Readability,ITID (avg),NMI (avg),NMI (max),CIC (avg),CIC (max),CICsyn (avg),CICsyn (max),CR,NM (avg),NM (max),TC (avg),TC (min),TC (max),#assignments (avg),#blank lines (avg),#commas (avg),#comments (avg),#comparisons (avg),Identifiers length (avg),#conditionals (avg),Indentation length (avg),#keywords (avg),Line length (avg),#loops (avg),#identifiers (avg),#numbers (avg),#operators (avg),#parenthesis (avg),#periods (avg),#spaces (avg),Identifiers length (max),Indentation length (max),#keywords (max),Line length (max),#identifiers (max),#numbers (max),#characters (max),#words (max),Entropy,Volume,LOC,#assignments (dft),#commas (dft),#comments (dft),#comparisons (dft),#conditionals (dft),Indentation length (dft),#keywords (dft),Line length (dft),#loops (dft),#identifiers (dft),#numbers (dft),#operators (dft),#parenthesis (dft),#periods (dft),#spaces (dft),Comments (Visual X),Comments (Visual Y),Identifiers (Visual X),Identifiers (Visual Y),Keywords (Visual X),Keywords (Visual Y),Numbers (Visual X),Numbers (Visual Y),Strings (Visual X),Strings (Visual Y),Literals (Visual X),Literals (Visual Y),Operators (Visual X),Operators (Visual Y),Comments (area),Identifiers (area),Keywords (area),Numbers (area),Strings (area),Literals (area),Operators (area),Identifiers/comments (area),Keywords/comments (area),Numbers/comments (area),Strings/comments (area),Literals/comments (area),Operators/comments (area),Keywords/identifiers (area),Numbers/identifiers (area),Strings/identifiers (area),Literals/identifiers (area),Operators/literals (area),Numbers/keywords (area),Strings/keywords (area),Literals/keywords (area),Operators/keywords (area),Strings/numbers (area),Literals/numbers (area),Operators/numbers (area),Literals/strings (area),Operators/strings (area),Operators/literals (area).1,#aligned blocks,Extent of aligned blocks,#nested blocks (avg),#parameters,#statements,file_content,PBU
2,2,2,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
1,5,5,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
1,4,4,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
1,2,1,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
2,4,4,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
1,2,2,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
1,2,1,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
1,3,2,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
4,10,7,3,1,1,1843,0,1,1,1843,0,1,1,1843,0,0.610178471,0.617647059,4.581395349,9,0.676470588,2,7.255474453,23,100,4.411764706,17,0,1,0,0.272727273,0.081632653,0.136363636,0.130434783,0,5.983870968,0,4.8,0.775,22.7,0,1.55,0,0.25,0.295454545,0.25,6.825,21,6,4,69,3,0,315,22,4.449600678,900.0687368,49,34,44,49,1,1,43,43,47,1,32,1,44,44,43,43,45.18367347,48,68.93877551,47.44285714,68.97959184,47.05714286,0,0,69,47.67142857,0,0,68.32653061,47.51428571,0.189285714,0.261607143,0.108035714,0,0.139285714,0,0.072321429,1.382075472,0.570754717,0,0.735849057,0,0.382075472,0.412969283,0,0.532423208,0,0.276450512,0,1.289256198,0,0.669421488,,,,0,0.519230769,,23,26,2,2,35,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CheckEstimator_printAttributeSummary {
  /**
   * Print out a short summary string for the dataset characteristics
   *
   * @param attrType the attribute type (NUMERIC, NOMINAL, etc.)
   * @param classType the class type (NUMERIC, NOMINAL, etc.)
   */
  // SNIPPET_STARTS
  protected void printAttributeSummary(int attrType, int classType) {
    String str = """";
    switch (attrType) {
      case Attribute.NUMERIC:
        str = "" numeric"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" nominal"" + str;
        break;
      case Attribute.STRING:
        str = "" string"" + str;
        break;
      case Attribute.DATE:
        str = "" date"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" relational"" + str;
        break;
    }
    str += "" attribute(s))"";
    switch (classType) {
      case Attribute.NUMERIC:
        str = "" (numeric class,"" + str;
        break;
      case Attribute.NOMINAL:
        str = "" (nominal class,"" + str;
        break;
      case Attribute.STRING:
        str = "" (string class,"" + str;
        break;
      case Attribute.DATE:
        str = "" (date class,"" + str;
        break;
      case Attribute.RELATIONAL:
        str = "" (relational class,"" + str;
        break;
    }
    print(str);
  }
}
",1
2,3,3,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",0
2,2,2,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
1,4,4,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
1,2,1,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",0
2,4,4,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
1,2,2,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
1,2,1,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
1,3,2,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
4,10,7,5,0.75,0.647575,68,0.017835968,0.75,0.9647575,231,0.017835968,0.75,1,388,0.017835968,0.410259813,0.824427481,4.227272727,10,0.564885496,2,3.393782383,20,98.89,5.061068702,37,0.539005943,0.11785113,0.9258201,0.325,0.04,0.075,0.208333333,0.15,7.452380952,0.157894737,6.578947368,0.578947368,31.68421053,0.078947368,2.210526316,0.105263158,0.1,1,0.473684211,8.684210526,18,14,5,78,7,1,417,13,4.417239428,1468.465367,50,39,40,50,40,40,40,40,49,40,40,40,40,40,40,40,76.78,49,79.94,48.82716049,79.92,48.67901235,79.76,48.80246914,80,49,0,0,79.84,48.79012346,0.25862069,0.365147783,0.053571429,0.001231527,0.026477833,0,0.094827586,1.411904762,0.207142857,0.004761905,0.102380952,0,0.366666667,0.146711636,0.003372681,0.072512648,0,0.259696459,0.022988506,0.494252874,0,1.770114943,21.5,0,77,0,3.581395349,,84,103,3.8,3,25,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$EstimatorUtils_getMinMax {
  /**
   * Find the minimum and the maximum of the attribute and return it in the last parameter..
   *
   * @param inst instances used to build the estimator
   * @param attrIndex index of the attribute
   * @param minMax the array to return minimum and maximum in
   * @return number of not missing values
   * @throws Exception if parameter minMax wasn't initialized properly
   */
  // SNIPPET_STARTS
  public static int getMinMax(Instances inst, int attrIndex, double[] minMax) throws Exception {
    double min = Double.NaN;
    double max = Double.NaN;
    Instance instance = null;
    int numNotMissing = 0;
    if ((minMax == null) || (minMax.length < 2)) {
      throw new Exception(""Error in Program, privat method getMinMax"");
    }
    Enumeration<Instance> enumInst = inst.enumerateInstances();
    if (enumInst.hasMoreElements()) {
      do {
        instance = enumInst.nextElement();
      } while (instance.isMissing(attrIndex) && (enumInst.hasMoreElements()));
      // add values if not missing
      if (!instance.isMissing(attrIndex)) {
        numNotMissing++;
        min = instance.value(attrIndex);
        max = instance.value(attrIndex);
      }
      while (enumInst.hasMoreElements()) {
        instance = enumInst.nextElement();
        if (!instance.isMissing(attrIndex)) {
          numNotMissing++;
          if (instance.value(attrIndex) < min) {
            min = (instance.value(attrIndex));
          } else {
            if (instance.value(attrIndex) > max) {
              max = (instance.value(attrIndex));
            }
          }
        }
      }
    }
    minMax[0] = min;
    minMax[1] = max;
    return numNotMissing;
  }
}
",1
2,2,2,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
2,3,3,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
1,2,1,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
1,2,1,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
2,4,4,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
1,2,2,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
1,2,1,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
1,3,2,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
4,10,7,4,0.5,0,6,0.004619633,0.715277778,0.666666667,4809.25,0.022029456,0.833333333,1,9035,0.03482122,0.143728152,0.796992481,4.875968992,11,0,0,1.414893617,18,0,5.338345865,45,0.399169414,0.144337567,1,0.186046512,0.11627907,0.11627907,0.025641026,0.093023256,8.666666667,0.105263158,6.842105263,0.5,31.21052632,0.026315789,1.973684211,0.131578947,0.023255814,0.953488372,0.421052632,8.473684211,40,14,2,67,6,2,322,10,4.548492167,1381.373544,43,42,43,42,43,43,43,43,43,43,43,43,43,41,43,43,0,0,67,41.79411765,66.97674419,41.64705882,66.13953488,41.70588235,66.90697674,41.69117647,0,0,66.90697674,41.42647059,0,0.543844857,0.056492411,0.001686341,0.012647555,0,0.113827993,,,,,,,0.103875969,0.003100775,0.023255814,0,0.209302326,0.029850746,0.223880597,0,2.014925373,7.5,0,67.5,0,9,,34,46,4.25,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ClassifierPerformanceEvaluatorCustomizer_addButtons {
  // SNIPPET_STARTS
  private void addButtons() {
    JButton okBut = new JButton(""OK"");
    JButton cancelBut = new JButton(""Cancel"");
    JPanel butHolder = new JPanel();
    butHolder.setLayout(new GridLayout(1, 2));
    butHolder.add(okBut);
    butHolder.add(cancelBut);
    add(butHolder, BorderLayout.SOUTH);
    okBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            if (m_modifyListener != null) {
              m_modifyListener.setModifiedStatus(
                  ClassifierPerformanceEvaluatorCustomizer.this, true);
            }
            if (m_evaluationMetrics.size() > 0) {
              StringBuilder b = new StringBuilder();
              for (String s : m_evaluationMetrics) {
                b.append(s).append("","");
              }
              String newList = b.substring(0, b.length() - 1);
              m_cpe.setEvaluationMetricsToOutput(newList);
            }
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
    cancelBut.addActionListener(
        new ActionListener() {

          @Override
          public void actionPerformed(ActionEvent e) {
            customizerClosing();
            if (m_parent != null) {
              m_parent.dispose();
            }
          }
        });
  }
}
",1
1,2,1,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
2,2,2,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
1,4,4,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
1,2,1,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",0
1,1,1,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
1,2,2,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
1,2,1,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
1,3,2,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",0
4,10,7,4,1,1,388,0.002920883,1,1,1629.4,0.011801966,1,1,3930,0.017329124,0.463682532,0.769230769,4.658730159,10,0.104895105,1,3.065656566,27,100,7.93006993,45,0.385622152,0.080064077,0.954521404,0.195121951,0.021276596,0.048780488,0.130434783,0.024390244,7.574712644,0.075,7.85,0.45,31.35,0,2.175,0.075,0.024390244,0.87804878,0.65,9.45,24,16,2,69,7,6,412,11,4.596703497,1409.735094,47,41,41,47,41,41,41,41,35,1,41,41,41,41,41,41,68.93617021,46,68.85106383,45.94285714,68.95744681,45.8,69,45.91428571,68.89361702,45.8,0,0,68.65957447,45.91428571,0.139327385,0.400137268,0.046671242,0.004804393,0.065888813,0,0.090597117,2.871921182,0.334975369,0.034482759,0.472906404,0,0.650246305,0.116638079,0.012006861,0.164665523,0,0.226415094,0.102941176,1.411764706,0,1.941176471,13.71428571,0,18.85714286,0,1.375,,44,84,3.4,1,24,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$ModelPerformanceChart_performRequest {
  /**
   * Describe <code>performRequest</code> method here.
   *
   * @param request a <code>String</code> value
   * @exception IllegalArgumentException if an error occurs
   */
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void performRequest(String request) {
    if (request.compareTo(""Show chart"") == 0) {
      try {
        // popup visualize panel
        if (!m_framePoppedUp) {
          m_framePoppedUp = true;
          final javax.swing.JFrame jf = new javax.swing.JFrame(""Model Performance Chart"");
          jf.setSize(800, 600);
          jf.getContentPane().setLayout(new BorderLayout());
          jf.getContentPane().add(m_visPanel, BorderLayout.CENTER);
          jf.addWindowListener(
              new java.awt.event.WindowAdapter() {

                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                  jf.dispose();
                  m_framePoppedUp = false;
                }
              });
          jf.setVisible(true);
          m_popupFrame = jf;
        } else {
          m_popupFrame.toFront();
        }
      } catch (Exception ex) {
        ex.printStackTrace();
        m_framePoppedUp = false;
      }
    } else if (request.equals(""Clear all plots"")) {
      m_visPanel.removeAllPlots();
      m_visPanel.validate();
      m_visPanel.repaint();
      m_visPanel = null;
      m_masterPlot = null;
      m_offscreenPlotData = null;
    } else {
      throw new IllegalArgumentException(request + "" not supported (Model Performance Chart)"");
    }
  }
}
",1
2,2,2,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",0
2,3,3,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",1
1,4,4,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",1
1,2,1,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",0
2,4,4,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",1
1,2,2,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",1
1,2,1,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",0
1,3,2,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",0
4,10,7,4,0.75,0.657725,6421,0.024123517,0.828703704,0.923938889,8381.5,0.032146795,0.9375,1,9035,0.03482122,0.455510825,0.772357724,4.512820513,10,0.138211382,1,3.610778443,31,100,9.105691057,45,0.47424916,0.15430335,1,0.058823529,0.05,0.029411765,0.135135135,0.176470588,8.984615385,0.15625,7.1875,0.4375,32.59375,0.03125,2.03125,0.09375,0.058823529,1.176470588,0.59375,8.625,22,12,2,65,5,1,313,11,4.606932182,1168.278231,40,34,34,40,34,34,34,34,40,34,34,34,34,34,34,33,63.375,39,65,38.6969697,65,38.71212121,64.925,38.86363636,65,38.40909091,0,0,64.9,38.78787879,0.152721365,0.45978879,0.036555646,0.002437043,0.017871649,0,0.108042242,3.010638298,0.239361702,0.015957447,0.117021277,0,0.707446809,0.0795053,0.005300353,0.038869258,0,0.234982332,0.066666667,0.488888889,0,2.955555556,7.333333333,0,44.33333333,0,6.045454545,,39,48,3.333333333,1,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$GeneratorPropertyIteratorPanel_actionPerformed {
  /**
   * Handles the various button clicking type activities.
   *
   * @param e a value of type 'ActionEvent'
   */
  // SNIPPET_STARTS
  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == m_ConfigureBut) {
      selectProperty();
    } else if (e.getSource() == m_StatusBox) {
      // notify any listeners
      for (int i = 0; i < m_Listeners.size(); i++) {
        ActionListener temp = (m_Listeners.get(i));
        temp.actionPerformed(
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""Editor status change""));
      }
      // Toggles whether the custom property is used
      if (m_StatusBox.getSelectedIndex() == 0) {
        m_Exp.setUsePropertyIterator(false);
        m_ConfigureBut.setEnabled(false);
        m_ArrayEditor.getCustomEditor().setEnabled(false);
        m_ArrayEditor.setValue(null);
        validate();
      } else {
        if (m_Exp.getPropertyArray() == null) {
          selectProperty();
        }
        if (m_Exp.getPropertyArray() == null) {
          m_StatusBox.setSelectedIndex(0);
        } else {
          m_Exp.setUsePropertyIterator(true);
          m_ConfigureBut.setEnabled(true);
          m_ArrayEditor.getCustomEditor().setEnabled(true);
        }
        validate();
      }
    }
  }
}
",1