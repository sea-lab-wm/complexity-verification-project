developer_position,PE gen,PE spec (java),Cyclomatic complexity,IMSQ (min),MIDQ (min),AEDQ (min),EAP (min),IMSQ (avg),MIDQ (avg),AEDQ (avg),EAP (avg),IMSQ (max),MIDQ (max),AEDQ (max),EAP (max),Readability,ITID (avg),NMI (avg),NMI (max),CIC (avg),CIC (max),CICsyn (avg),CICsyn (max),CR,NM (avg),NM (max),TC (avg),TC (min),TC (max),#assignments (avg),#blank lines (avg),#commas (avg),#comments (avg),#comparisons (avg),Identifiers length (avg),#conditionals (avg),Indentation length (avg),#keywords (avg),Line length (avg),#loops (avg),#identifiers (avg),#numbers (avg),#operators (avg),#parenthesis (avg),#periods (avg),#spaces (avg),Identifiers length (max),Indentation length (max),#keywords (max),Line length (max),#identifiers (max),#numbers (max),#characters (max),#words (max),Entropy,Volume,LOC,#assignments (dft),#commas (dft),#comments (dft),#comparisons (dft),#conditionals (dft),Indentation length (dft),#keywords (dft),Line length (dft),#loops (dft),#identifiers (dft),#numbers (dft),#operators (dft),#parenthesis (dft),#periods (dft),#spaces (dft),Comments (Visual X),Comments (Visual Y),Identifiers (Visual X),Identifiers (Visual Y),Keywords (Visual X),Keywords (Visual Y),Numbers (Visual X),Numbers (Visual Y),Strings (Visual X),Strings (Visual Y),Literals (Visual X),Literals (Visual Y),Operators (Visual X),Operators (Visual Y),Comments (area),Identifiers (area),Keywords (area),Numbers (area),Strings (area),Literals (area),Operators (area),Identifiers/comments (area),Keywords/comments (area),Numbers/comments (area),Strings/comments (area),Literals/comments (area),Operators/comments (area),Keywords/identifiers (area),Numbers/identifiers (area),Strings/identifiers (area),Literals/identifiers (area),Operators/literals (area),Numbers/keywords (area),Strings/keywords (area),Literals/keywords (area),Operators/keywords (area),Strings/numbers (area),Literals/numbers (area),Operators/numbers (area),Literals/strings (area),Operators/strings (area),Operators/literals (area).1,#aligned blocks,Extent of aligned blocks,#nested blocks (avg),#parameters,#statements,file_content,PBU
1,4,3,3,0.5,0.17295,18,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1,2755,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100,5.323232323,45,0.693351121,0.414039336,1,0.096774194,0.147058824,0.064516129,0.037037037,0,10.16981132,0,0,0.730769231,28.69230769,0,2.038461538,0,0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0,0,97.97058824,32.47474747,98,32.07070707,0,0,97.94117647,32.88888889,0,0,97.97058824,32.47474747,0,0.526804124,0.089690722,0,0.150515464,0,0.090721649,,,,,,,0.170254403,0,0.285714286,0,0.17221135,0,1.67816092,0,1.011494253,,,,0,0.602739726,,25,27,4,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",1
2,8,2,3,0.5,0.17295,18,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1,2755,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100,5.323232323,45,0.693351121,0.414039336,1,0.096774194,0.147058824,0.064516129,0.037037037,0,10.16981132,0,0,0.730769231,28.69230769,0,2.038461538,0,0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0,0,97.97058824,32.47474747,98,32.07070707,0,0,97.94117647,32.88888889,0,0,97.97058824,32.47474747,0,0.526804124,0.089690722,0,0.150515464,0,0.090721649,,,,,,,0.170254403,0,0.285714286,0,0.17221135,0,1.67816092,0,1.011494253,,,,0,0.602739726,,25,27,4,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",0
4,10,2,3,0.5,0.17295,18,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1,2755,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100,5.323232323,45,0.693351121,0.414039336,1,0.096774194,0.147058824,0.064516129,0.037037037,0,10.16981132,0,0,0.730769231,28.69230769,0,2.038461538,0,0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0,0,97.97058824,32.47474747,98,32.07070707,0,0,97.94117647,32.88888889,0,0,97.97058824,32.47474747,0,0.526804124,0.089690722,0,0.150515464,0,0.090721649,,,,,,,0.170254403,0,0.285714286,0,0.17221135,0,1.67816092,0,1.011494253,,,,0,0.602739726,,25,27,4,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",0
4,7,3,3,0.5,0.17295,18,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1,2755,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100,5.323232323,45,0.693351121,0.414039336,1,0.096774194,0.147058824,0.064516129,0.037037037,0,10.16981132,0,0,0.730769231,28.69230769,0,2.038461538,0,0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0,0,97.97058824,32.47474747,98,32.07070707,0,0,97.94117647,32.88888889,0,0,97.97058824,32.47474747,0,0.526804124,0.089690722,0,0.150515464,0,0.090721649,,,,,,,0.170254403,0,0.285714286,0,0.17221135,0,1.67816092,0,1.011494253,,,,0,0.602739726,,25,27,4,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",0
3,5,5,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",1
1,4,2,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",1
1,2,2,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",0
1,3,2,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",0
3,8,7,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",1
1,3,1,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",0
4,3,3,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",0
1,3,3,4,0.888888889,0,81,0.101894477,0.984126984,0.425603571,4231.5,0.129986616,1,1,11904,0.150177191,0.3075656,0.831325301,5.210526316,10,0,0,1.713043478,8,0,7.126506024,45,0.371606558,0.175411604,0.74023321,0.23255814,0,0.23255814,0.022727273,0.093023256,8.796116505,0.069767442,8.744186047,0.488372093,37.58139535,0,2.395348837,0.069767442,0.069767442,0.930232558,0.604651163,10.30232558,25,18,3,122,9,4,443,11,4.670659027,1828.019148,43,43,43,1,43,43,41,43,42,1,42,43,43,42,43,1,0,0,121.9767442,41.74796748,121.9534884,41.69105691,121.7209302,41.80487805,122,41.87804878,0,0,121.9069767,41.77235772,0,0.516089109,0.047029703,0.005569307,0.056311881,0,0.100866337,,,,,,,0.091127098,0.010791367,0.10911271,0,0.195443645,0.118421053,1.197368421,0,2.144736842,10.11111111,0,18.11111111,0,1.791208791,,53,81,3,2,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$MyExpenses_contribFeatureCalled {
  // org.totschnig.myexpenses.activity.MyExpenses.contribFeatureCalled(org.totschnig.myexpenses.model.ContribFeature,java.io.Serializable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void contribFeatureCalled(ContribFeature feature, Serializable tag) {
    switch (feature) {
      case DISTRIBUTION:
        Account a = Account.getInstanceFromDb(mAccountId);
        recordUsage(feature);
        Intent i = new Intent(this, ManageCategories.class);
        i.setAction(""myexpenses.intent.distribution"");
        i.putExtra(KEY_ACCOUNTID, mAccountId);
        if (tag != null) {
          int year = (int) ((Long) tag / 1000);
          int groupingSecond = (int) ((Long) tag % 1000);
          i.putExtra(""grouping"", a != null ? a.grouping : Grouping.NONE);
          i.putExtra(""groupingYear"", year);
          i.putExtra(""groupingSecond"", groupingSecond);
        }
        startActivity(i);
        break;
      case SPLIT_TRANSACTION:
        if (tag != null) {
          startTaskExecution(TaskExecutionFragment.TASK_SPLIT, (Object[]) tag, null, 0);
        }
        break;
      case PRINT:
        TransactionList tl = getCurrentFragment();
        if (tl != null) {
          Bundle args = new Bundle();
          args.putSparseParcelableArray(TransactionList.KEY_FILTER, tl.getFilterCriteria());
          args.putLong(KEY_ROWID, mAccountId);
          getSupportFragmentManager()
              .beginTransaction()
              .add(
                  TaskExecutionFragment.newInstanceWithBundle(args, TASK_PRINT),
                  ProtectionDelegate.ASYNC_TAG)
              .add(
                  ProgressDialogFragment.newInstance(R.string.progress_dialog_printing),
                  ProtectionDelegate.PROGRESS_TAG)
              .commit();
        }
        break;
    }
  }
}
",1
2,4,3,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",1
1,4,2,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",1
1,3,2,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",1
1,3,2,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",0
1,3,1,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",0
3,6,1,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",0
4,3,3,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",0
1,3,3,4,0.095238095,0,2,0.000619426,0.580906,0.024390244,995,0.269905319,1,1,2295,0.582784008,0.143917128,0.871681416,5.200934579,12,0.066371681,3,5.027272727,27,100,9.292035398,45,0.420971687,0.149071198,0.843274043,0.555555556,0.015625,0.142857143,0.015873016,0.349206349,7.103896104,0.258064516,5.225806452,0.596774194,32.66129032,0,2.483870968,0.129032258,0.111111111,1.333333333,0.725806452,7.758064516,37,10,3,101,7,4,496,19,4.5700694,3163.585151,64,63,63,64,63,57,1,63,61,1,60,62,63,61,62,1,101,62.38235294,100.96875,62.75490196,100.921875,62.54901961,101,62.38235294,0,0,0,0,100.890625,62.80392157,0.03248925,0.526039178,0.056378404,0.001911132,0,0,0.153368371,16.19117647,1.735294118,0.058823529,0,0,4.720588235,0.107175295,0.003633061,0,0,0.291553134,0.033898305,0,0,2.720338983,0,0,80.25,,,,38,39,2.416666667,3,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$MyExpenses_getContentProviderOperationsForCreate {
  // org.totschnig.myexpenses.sync.SyncAdapter.getContentProviderOperationsForCreate(org.totschnig.myexpenses.sync.json.TransactionChange,int,int)
  // SNIPPET_STARTS
  private ArrayList<ContentProviderOperation> getContentProviderOperationsForCreate(
      TransactionChange change, int offset, int parentOffset) {
    if (!change.isCreate()) throw new AssertionError();
    Long amount;
    if (change.amount() != null) {
      amount = change.amount();
    } else {
      amount = 0L;
    }
    Transaction t;
    long transferAccount;
    if (change.splitParts() != null) {
      t = new SplitTransaction(getAccount().getId(), amount);
    } else if (change.transferAccount() != null
        && (transferAccount = extractTransferAccount(change.transferAccount(), change.label()))
            != -1) {
      t = new Transfer(getAccount().getId(), amount);
      t.transfer_account = transferAccount;
    } else {
      t = new Transaction(getAccount().getId(), amount);
      if (change.label() != null) {
        long catId = extractCatId(change.label());
        if (catId != -1) {
          t.setCatId(catId);
        }
      }
    }
    t.uuid = change.uuid();
    if (change.comment() != null) {
      t.comment = change.comment();
    }
    if (change.date() != null) {
      Long date = change.date();
      assert date != null;
      t.setDate(new Date(date * 1000));
    }
    if (change.payeeName() != null) {
      long id = Payee.extractPayeeId(change.payeeName(), payeeToId);
      if (id != -1) {
        t.payeeId = id;
      }
    }
    if (change.methodLabel() != null) {
      long id = extractMethodId(change.methodLabel());
      if (id != -1) {
        t.methodId = id;
      }
    }
    if (change.crStatus() != null) {
      t.crStatus = Transaction.CrStatus.valueOf(change.crStatus());
    }
    t.referenceNumber = change.referenceNumber();
    if (parentOffset == -1 && change.parentUuid() != null) {
      long parentId = Transaction.findByUuid(change.parentUuid());
      if (parentId == -1) {
        // if we fail to link a split part to a parent, we need to ignore it
        return new ArrayList<>();
      }
      t.parentId = parentId;
    }
    if (change.pictureUri() != null) {
      t.setPictureUri(Uri.parse(change.pictureUri()));
    }
    return t.buildSaveOperations(offset, parentOffset, true);
  }
}
",0
2,4,3,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
1,4,2,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
1,3,1,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
1,3,2,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
1,3,1,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",0
3,6,1,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
4,3,3,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
4,5,2,4,0.095238095,0,138,0,0.543278149,0,795.3333333,0,1,0,1124,0,0.254719079,0.927777778,4.94011976,11,0,0,5.963114754,29,0,11.48333333,45,0.54229179,0.11785113,0.912870929,0.282608696,0,0.02173913,0.021276596,0.260869565,7.943548387,0.304347826,4.47826087,0.434782609,34.32608696,0,2.695652174,0,0,1.695652174,1,6.195652174,21,6,2,92,8,0,285,25,4.632314601,2155.737006,46,32,46,1,46,32,1,46,32,1,32,1,1,32,32,32,0,0,91.89130435,44.1827957,91.95652174,41.04301075,0,0,92,43.96774194,0,0,91.7173913,44.22580645,0,0.585813806,0.036098797,0,0.047498417,0,0.157061431,,,,,,,0.061621622,0,0.081081081,0,0.268108108,0,1.315789474,0,4.350877193,,,,0,3.306666667,,22,22,2,2,30,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$MyExpenses_mergeUpdate {
  // org.totschnig.myexpenses.sync.SyncAdapter.mergeUpdate(org.totschnig.myexpenses.sync.json.TransactionChange,org.totschnig.myexpenses.sync.json.TransactionChange)
  // SNIPPET_STARTS
  private TransactionChange mergeUpdate(TransactionChange initial, TransactionChange change) {
    if (!(change.isCreateOrUpdate() && initial.isCreateOrUpdate())) {
      throw new IllegalStateException(""Can only merge creates and updates"");
    }
    if (!initial.uuid().equals(change.uuid())) {
      throw new IllegalStateException(""Can only merge changes with same uuid"");
    }
    TransactionChange.Builder builder = initial.toBuilder();
    if (change.parentUuid() != null) {
      builder.setParentUuid(change.parentUuid());
    }
    if (change.comment() != null) {
      builder.setComment(change.comment());
    }
    if (change.date() != null) {
      builder.setDate(change.date());
    }
    if (change.amount() != null) {
      builder.setAmount(change.amount());
    }
    if (change.label() != null) {
      builder.setLabel(change.label());
    }
    if (change.payeeName() != null) {
      builder.setPayeeName(change.payeeName());
    }
    if (change.transferAccount() != null) {
      builder.setTransferAccount(change.transferAccount());
    }
    if (change.methodLabel() != null) {
      builder.setMethodLabel(change.methodLabel());
    }
    if (change.crStatus() != null) {
      builder.setCrStatus(change.crStatus());
    }
    if (change.referenceNumber() != null) {
      builder.setReferenceNumber(change.referenceNumber());
    }
    if (change.pictureUri() != null) {
      builder.setPictureUri(change.pictureUri());
    }
    if (change.splitParts() != null) {
      builder.setSplitParts(change.splitParts());
    }
    return builder.setTimeStamp(System.currentTimeMillis()).build();
  }
}
",1
2,4,3,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",1
3,5,5,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",1
1,2,2,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",1
1,2,2,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",1
3,8,7,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",0
3,6,1,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",1
4,3,3,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",0
1,3,3,5,1,0,0,0,1,0,213.0714286,0.057022413,1,0,2755,0.511819486,0.211272925,0.787234043,5.868613139,12,0,0,3.558139535,11,0,6.035460993,45,0.689483761,0.288675135,1,0.333333333,0,0.155555556,0.02173913,0.266666667,5.196261682,0.177777778,9.777777778,0.555555556,31.11111111,0.044444444,2.377777778,0.155555556,0.133333333,1.022222222,0.488888889,12.13333333,17,16,4,102,8,2,546,13,4.12564463,1884.2981,45,44,45,1,44,45,45,45,44,45,45,45,45,45,45,44,0,0,101.9555556,43.63106796,101.9333333,43.57281553,101.7555556,42.9223301,0,0,102,44,101.8888889,43.47572816,0,0.397142857,0.062142857,0.004285714,0,0.005714286,0.140714286,,,,,,,0.15647482,0.010791367,0,0.014388489,0.354316547,0.068965517,0,0.091954023,2.264367816,0,1.333333333,32.83333333,,,24.625,24,25,5.333333333,3,33,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$MyExpenses_processChar {
  // org.totschnig.myexpenses.util.LazyFontSelector.processChar(char[],int,java.lang.StringBuffer)
  // SNIPPET_STARTS
  protected Chunk processChar(char[] cc, int k, StringBuffer sb)
      throws DocumentException, IOException {
    Chunk newChunk = null;
    char c = cc[k];
    if (c == '\n' || c == '\r') {
      sb.append(c);
    } else {
      Font font;
      if (Utilities.isSurrogatePair(cc, k)) {
        int u = Utilities.convertToUtf32(cc, k);
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(u) || Character.getType(u) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            sb.append(cc[++k]);
            break;
          }
        }
      } else {
        for (int f = 0; f < files.length; ++f) {
          font = getFont(f);
          if (font.getBaseFont().charExists(c) || Character.getType(c) == Character.FORMAT) {
            if (currentFont != font) {
              if (sb.length() > 0 && currentFont != null) {
                newChunk = new Chunk(sb.toString(), currentFont);
                sb.setLength(0);
              }
              currentFont = font;
            }
            sb.append(c);
            break;
          }
        }
      }
    }
    return newChunk;
  }
}
",0
3,5,5,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",1
1,4,2,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",0
1,2,2,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",1
1,3,1,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",1
3,8,7,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",1
1,3,1,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",1
4,5,2,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",0
4,3,3,4,0.75,0,10214,0.167139076,0.95,0,10214,0.167139076,1,0,10214,0.167139076,0.456376851,0.9296875,4.671875,10,0.1015625,2,0.299435028,3,100,12.0859375,45,0.420059672,0.182574186,0.707106781,0.321428571,0.096774194,0,0.038461538,0.321428571,13.39130435,0.16,10.72,0.8,46.52,0,1.84,0.28,0.142857143,0.821428571,0.36,13.64,35,32,3,98,5,1,367,11,4.441450437,974.7751918,31,28,1,31,28,28,28,27,30,1,26,27,28,26,28,28,98,30,97.96774194,29.7979798,98,29.6969697,97.80645161,29.74747475,0,0,0,0,97.90322581,29.81818182,0.137879911,0.457375834,0.065974796,0.005930319,0,0,0.080059303,3.317204301,0.478494624,0.043010753,0,0,0.580645161,0.144246353,0.012965964,0,0,0.175040519,0.08988764,0,0,1.213483146,0,0,13.5,,,,44,46,2.333333333,1,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$MyExpenses_updateOrClearHeader {
  // se.emilsjolander.stickylistheaders.StickyListHeadersListView.updateOrClearHeader(int)
  // SNIPPET_STARTS
  private void updateOrClearHeader(int firstVisiblePosition) {
    final int adapterCount = mAdapter == null ? 0 : mAdapter.getCount();
    if (adapterCount == 0 || !mAreHeadersSticky) {
      return;
    }
    final int headerViewCount = mList.getHeaderViewsCount();
    int headerPosition = firstVisiblePosition - headerViewCount;
    if (mList.getChildCount() > 0) {
      View firstItem = mList.getChildAt(0);
      if (firstItem.getBottom() < stickyHeaderTop()) {
        headerPosition++;
      }
    }
    // It is not a mistake to call getFirstVisiblePosition() here.
    // Most of the time getFixedFirstVisibleItem() should be called
    // but that does not work great together with getChildAt()
    final boolean doesListHaveChildren = mList.getChildCount() != 0;
    final boolean isFirstViewBelowTop =
        doesListHaveChildren
            && mList.getFirstVisiblePosition() == 0
            && mList.getChildAt(0).getTop() >= stickyHeaderTop();
    final boolean isHeaderPositionOutsideAdapterRange =
        headerPosition > adapterCount - 1 || headerPosition < 0;
    if (!doesListHaveChildren || isHeaderPositionOutsideAdapterRange || isFirstViewBelowTop) {
      clearHeader();
      return;
    }
    updateHeader(headerPosition);
  }
}
",1