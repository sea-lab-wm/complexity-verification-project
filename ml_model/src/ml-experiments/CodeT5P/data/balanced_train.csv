developer_position,PE gen,PE spec (java),Cyclomatic complexity,IMSQ (min),MIDQ (min),AEDQ (min),EAP (min),IMSQ (avg),MIDQ (avg),AEDQ (avg),EAP (avg),IMSQ (max),MIDQ (max),AEDQ (max),EAP (max),Readability,ITID (avg),NMI (avg),NMI (max),CIC (avg),CIC (max),CICsyn (avg),CICsyn (max),CR,NM (avg),NM (max),TC (avg),TC (min),TC (max),#assignments (avg),#blank lines (avg),#commas (avg),#comments (avg),#comparisons (avg),Identifiers length (avg),#conditionals (avg),Indentation length (avg),#keywords (avg),Line length (avg),#loops (avg),#identifiers (avg),#numbers (avg),#operators (avg),#parenthesis (avg),#periods (avg),#spaces (avg),Identifiers length (max),Indentation length (max),#keywords (max),Line length (max),#identifiers (max),#numbers (max),#characters (max),#words (max),Entropy,Volume,LOC,#assignments (dft),#commas (dft),#comments (dft),#comparisons (dft),#conditionals (dft),Indentation length (dft),#keywords (dft),Line length (dft),#loops (dft),#identifiers (dft),#numbers (dft),#operators (dft),#parenthesis (dft),#periods (dft),#spaces (dft),Comments (Visual X),Comments (Visual Y),Identifiers (Visual X),Identifiers (Visual Y),Keywords (Visual X),Keywords (Visual Y),Numbers (Visual X),Numbers (Visual Y),Strings (Visual X),Strings (Visual Y),Literals (Visual X),Literals (Visual Y),Operators (Visual X),Operators (Visual Y),Comments (area),Identifiers (area),Keywords (area),Numbers (area),Strings (area),Literals (area),Operators (area),Identifiers/comments (area),Keywords/comments (area),Numbers/comments (area),Strings/comments (area),Literals/comments (area),Operators/comments (area),Keywords/identifiers (area),Numbers/identifiers (area),Strings/identifiers (area),Literals/identifiers (area),Operators/literals (area),Numbers/keywords (area),Strings/keywords (area),Literals/keywords (area),Operators/keywords (area),Strings/numbers (area),Literals/numbers (area),Operators/numbers (area),Literals/strings (area),Operators/strings (area),Operators/literals (area).1,#aligned blocks,Extent of aligned blocks,#nested blocks (avg),#parameters,#statements,file_content,PBU
4,3,3,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",1
1,4,2,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",1
1,3,2,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",1
1,3,2,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,2,1,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",1
3,6,1,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
2,4,2,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,3,3,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
4,2,6,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",1
4,3,3,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
1,4,2,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
1,3,2,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
1,3,2,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
1,2,1,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",0
3,6,1,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
2,4,2,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
2,4,2,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
4,2,6,4,0.175675676,0.0,162.0,0.005531468,0.175675676,0.0,2614.4,0.124685269,0.175675676,0.0,5169.0,0.184262169,0.567715168,0.71969697,5.59,10,0.25,1,3.711956522,18,100.0,5.727272727,47,0.390990059,0.177122977,0.793492048,0.205882353,0.138888889,0.117647059,0.09375,0.088235294,8.096385542,0.24137931,12.13793103,0.862068966,45.68965517,0.034482759,2.862068966,0.172413793,0.058823529,0.970588235,0.344827586,14.96551724,27,24,4,118,12,2,452,10,4.320445806,1122.203063,36,34,34,36,34,34,34,33,36,34,28,1,34,34,34,34,118.0,35.0,118.0,34.84033613,118.0,34.83193277,0.0,0.0,118.0,34.81512605,0,0.0,117.9166667,34.81512605,0.041937816,0.417208966,0.066522054,0.0,0.095444685,0.0,0.076644975,9.948275862,1.586206897,0.0,2.275862069,0.0,1.827586207,0.159445407,0.0,0.228769497,0.0,0.183708839,0.0,1.434782609,0.0,1.152173913,,,,0.0,0.803030303,,8,11,2.666666667,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$K9_getInstance {
  // com.fsck.k9.mail.store.RemoteStore.getInstance(android.content.Context,com.fsck.k9.mail.store.StoreConfig)
  /** Get an instance of a remote mail store. */
  // SNIPPET_STARTS
  public static synchronized Store getInstance(Context context, StoreConfig storeConfig)
      throws MessagingException {
    String uri = storeConfig.getStoreUri();
    if (uri.startsWith(""local"")) {
      throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
    }
    Store store = sStores.get(uri);
    if (store == null) {
      if (uri.startsWith(""imap"")) {
        OAuth2TokenProvider oAuth2TokenProvider = null;
        store =
            new ImapStore(
                storeConfig,
                new DefaultTrustedSocketFactory(context),
                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
                oAuth2TokenProvider);
      } else if (uri.startsWith(""pop3"")) {
        store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
      } else if (uri.startsWith(""webdav"")) {
        store = new WebDavStore(storeConfig, new WebDavHttpClientFactory());
      }
      if (store != null) {
        sStores.put(uri, store);
      }
    }
    if (store == null) {
      throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
    }
    return store;
  }
}
",1
4,3,3,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",1
1,4,2,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",1
1,3,2,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
1,3,2,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
1,2,1,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
3,6,1,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",1
4,3,3,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",1
1,3,3,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",1
1,4,1,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",1
1,5,5,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",1
1,3,2,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",0
1,3,2,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",0
1,2,1,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",1
1,3,1,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",1
2,4,2,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",1
1,3,3,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",0
4,2,6,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",1
1,4,1,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
1,4,2,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
1,3,2,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",0
1,3,2,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
1,2,1,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",0
1,3,1,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
2,4,2,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
1,3,3,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
4,2,6,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",1
1,8,3,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
1,2,1,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
1,6,1,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
1,3,2,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
1,3,1,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
2,5,4,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
1,4,3,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",0
4,8,5,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
4,10,10,3,0.885668277,0.5,0.0,3.42e-05,0.885668277,0.5,921.5,3.42e-05,0.885668277,0.5,1843.0,3.42e-05,0.448144674,0.814814815,6.409090909,10,2.530864198,7,3.480263158,20,100.0,6.12345679,45,0.735036212,0.48507125,1.0,0.65625,0.0,0.0625,0.304347826,0.28125,9.318181818,0.28125,10.25,1.03125,34.3125,0.0,1.375,0.8125,0.0,0.75,0.40625,12.96875,25,16,2,77,6,4,730,14,4.351599063,965.6186625,45,31,32,45,32,32,1,31,45,1,31,32,1,32,19,1,113.3555556,44.0,116.0,43.93162393,115.7777778,43.65811966,114.2222222,43.82051282,0.0,0.0,0,0.0,115.4888889,43.92307692,0.464912281,0.216374269,0.056042885,0.007797271,0.0,0.0,0.052631579,0.465408805,0.120545073,0.016771488,0.0,0.0,0.113207547,0.259009009,0.036036036,0.0,0.0,0.243243243,0.139130435,0.0,0.0,0.939130435,0.0,0.0,6.75,,,,32,48,2.454545455,3,23,"package FeatureExtraction.snippet_splitter_out;

public class HealthReport implements Serializable, Comparable<HealthReport> {
  // SNIPPET_STARTS
  public HealthReport(int score, String iconUrl, Localizable description) {
    this.score = score;
    if (score <= 20) {
      this.iconClassName = HEALTH_0_TO_20;
    } else if (score <= 40) {
      this.iconClassName = HEALTH_21_TO_40;
    } else if (score <= 60) {
      this.iconClassName = HEALTH_41_TO_60;
    } else if (score <= 80) {
      this.iconClassName = HEALTH_61_TO_80;
    } else {
      this.iconClassName = HEALTH_OVER_80;
    }
    if (iconUrl == null) {
      if (score <= 20) {
        this.iconUrl = HEALTH_0_TO_20_IMG;
      } else if (score <= 40) {
        this.iconUrl = HEALTH_21_TO_40_IMG;
      } else if (score <= 60) {
        this.iconUrl = HEALTH_41_TO_60_IMG;
      } else if (score <= 80) {
        this.iconUrl = HEALTH_61_TO_80_IMG;
      } else {
        this.iconUrl = HEALTH_OVER_80_IMG;
      }
    } else {
      this.iconUrl = iconUrl;
    }
    this.description = null;
    setLocalizibleDescription(description);
  }
}
",1
1,8,3,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
1,2,1,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
1,2,1,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
1,2,1,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
1,3,1,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
2,5,4,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",0
1,4,4,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
4,8,5,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",1
4,10,10,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",0
4,6,4,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",1
2,5,3,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,6,1,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",1
1,3,2,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,3,1,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,4,2,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,4,4,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",1
4,8,5,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",1
4,10,10,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",1
1,8,3,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
2,5,3,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",0
1,6,1,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
1,6,1,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
1,3,1,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
2,5,4,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
1,4,4,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",0
4,8,5,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
4,10,10,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",1
1,8,3,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
1,2,1,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
1,6,1,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
1,3,2,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",0
1,3,1,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
2,5,4,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
2,4,3,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",0
4,8,5,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
4,10,10,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",1
2,3,3,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
2,2,2,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",1
1,4,4,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",1
1,3,2,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",1
2,4,4,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",1
1,2,2,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",1
1,2,1,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
1,3,2,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
4,10,7,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
2,3,3,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",1
1,5,5,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",1
1,4,4,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",0
1,2,1,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",0
2,4,4,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",1
1,2,2,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",1
1,2,1,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",1
1,3,2,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",0
4,2,6,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",1
2,3,3,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",1
1,5,5,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",1
1,4,4,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",0
1,2,1,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",0
2,4,4,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",1
3,6,1,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",0
2,4,2,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",1
1,3,2,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",1
4,2,6,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",1
4,10,2,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",1
1,5,5,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",1
1,4,4,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
1,2,1,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
2,4,4,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
3,6,1,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
2,4,2,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",1
1,3,3,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",1
4,2,6,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",1
4,10,2,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",1
1,4,1,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",1
1,3,2,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",1
1,2,1,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",1
1,2,1,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
1,3,1,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
2,4,2,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
1,3,3,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",1
4,2,6,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",1
4,6,4,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",1
3,5,5,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",1
1,3,1,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
1,3,2,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
1,3,2,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
3,8,7,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",1
1,4,4,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
4,5,2,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
1,3,3,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",1
4,5,2,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",1
1,4,4,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",1
3,5,5,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",1
1,2,2,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",1
1,3,2,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
3,8,7,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
1,3,1,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",1
4,5,2,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",1
1,3,3,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
4,5,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",1
3,5,5,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",1
1,3,1,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,2,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",1
1,3,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
3,8,7,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",1
1,3,1,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
4,5,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
4,3,3,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
4,5,2,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
3,5,5,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
1,3,1,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",0
1,2,2,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
1,3,2,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
3,8,7,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
1,4,4,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
4,5,2,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
4,3,3,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",1
4,6,4,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
3,5,5,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
1,3,1,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
1,2,2,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",0
1,3,2,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
3,8,7,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
1,4,4,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
4,5,2,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
1,3,3,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",1
4,10,2,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,4,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",1
1,4,2,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",1
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,3,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
4,5,2,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
4,7,3,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
4,10,2,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
4,3,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",1
1,3,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",1
1,4,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
4,7,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,2,1,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
1,5,5,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
1,4,1,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
1,4,4,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",0
1,1,1,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
1,4,3,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
2,2,1,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
4,10,2,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
4,7,3,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",1
4,10,2,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",0
1,2,1,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",1
1,4,1,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",1
1,4,2,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",1
1,1,1,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",1
1,3,1,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",0
4,5,2,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",1
1,2,1,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",0
4,10,2,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",1
4,10,2,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
1,2,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
1,2,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
1,3,2,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",0
1,2,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
1,3,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",0
4,5,2,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
1,2,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
4,7,3,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",1
4,6,4,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",1
1,9,7,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",1
1,3,1,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,3,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,3,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,4,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",1
1,4,4,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
4,5,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,3,3,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",1
4,6,4,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
2,4,3,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
1,3,1,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
1,3,2,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
1,3,1,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",0
1,4,2,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",0
1,4,4,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
4,8,5,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
1,3,3,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",1
4,6,4,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",1
2,4,3,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",1
1,3,1,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",1
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,4,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,4,4,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",1
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,3,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
4,6,4,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",1
2,4,3,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",0
1,6,1,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",0
1,3,2,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",1
1,3,1,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",0
1,4,2,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",1
1,4,4,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",0
4,8,5,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",1
4,10,10,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",1
4,5,3,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",1
4,6,4,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",1
1,3,1,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
1,3,2,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
1,3,2,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",1
1,4,2,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",1
1,4,4,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",1
1,3,3,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
1,3,3,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",1
4,10,2,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
1,2,1,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
1,2,1,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
4,3,3,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
1,2,1,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
2,5,4,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
1,4,3,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
1,2,1,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
4,7,3,2,0.694444444,1.0,94.0,0.043560084,0.694444444,1.0,1014.0,0.559009903,0.694444444,1.0,1756.0,1.0,0.188220963,0.821292776,5.844036697,11,0.296577947,2,7.876876877,34,20.38,5.049429658,45,0.0,1.0,0.0,0.023809524,0.068181818,0.0,0.071428571,0.095238095,10.304,0.0,9.948717949,0.846153846,51.41025641,0.0,3.205128205,0.0,0.0,1.428571429,0.692307692,10.94871795,32,20,1,87,5,0,439,36,4.575299685,1983.006382,44,42,1,44,42,1,42,40,1,1,42,1,1,42,42,42,0.0,42.98113208,158.0,42.96855346,157.9545455,42.32075472,0.0,0.0,0.0,0.0,0,0.0,157.4318182,42.90566038,0.07816092,0.592183908,0.048275862,0.0,0.0,0.0,0.085057471,7.576470588,0.617647059,0.0,0.0,0.0,1.088235294,0.081521739,0.0,0.0,0.0,0.14363354,0.0,0.0,0.0,1.761904762,,,,,,,101,479,1.0,1,27,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$OpenCMSCore_createContextMenu {
  // org.opencms.ade.sitemap.client.hoverbar.CmsHoverbarContextMenuButton.createContextMenu(org.opencms.ade.sitemap.client.hoverbar.CmsSitemapHoverbar)
  // SNIPPET_STARTS
  public List<A_CmsSitemapMenuEntry> createContextMenu(CmsSitemapHoverbar hoverbar) {
    List<A_CmsSitemapMenuEntry> result = Lists.newArrayList();
    result.add(new CmsGotoMenuEntry(hoverbar));
    result.add(new CmsGotoExplorerMenuEntry(hoverbar));
    result.add(new CmsOpenGalleryMenuEntry(hoverbar));
    result.add(new CmsEditRedirectMenuEntry(hoverbar));
    result.add(new CmsEditModelPageMenuEntry(hoverbar));
    result.add(new CmsDeleteModelPageMenuEntry(hoverbar));
    result.add(new CmsDisableMenuEntry(hoverbar));
    result.add(new CmsEditMenuEntry(hoverbar));
    result.add(new CmsCopyPageMenuEntry(hoverbar));
    result.add(new CmsCopyModelPageMenuEntry(hoverbar));
    result.add(new CmsSetDefaultModelMenuEntry(hoverbar));
    result.add(new CmsCopyAsModelGroupPageMenuEntry(hoverbar));
    result.add(new CmsCreateGalleryMenuEntry(hoverbar));
    result.add(new CmsResourceInfoMenuEntry(hoverbar));
    result.add(new CmsParentSitemapMenuEntry(hoverbar));
    result.add(new CmsGotoSubSitemapMenuEntry(hoverbar));
    result.add(new CmsNewChoiceMenuEntry(hoverbar));
    result.add(new CmsHideMenuEntry(hoverbar));
    result.add(new CmsShowMenuEntry(hoverbar));
    result.add(new CmsAddToNavMenuEntry(hoverbar));
    result.add(new CmsBumpDetailPageMenuEntry(hoverbar));
    result.add(new CmsRefreshMenuEntry(hoverbar));
    result.add(
        new CmsAdvancedSubmenu(
            hoverbar,
            Arrays.asList(
                new CmsAvailabilityMenuEntry(hoverbar),
                new CmsLockReportMenuEntry(hoverbar),
                new CmsSeoMenuEntry(hoverbar),
                new CmsSubSitemapMenuEntry(hoverbar),
                new CmsMergeMenuEntry(hoverbar),
                new CmsRemoveMenuEntry(hoverbar))));
    result.add(new CmsModelPageLockReportMenuEntry(hoverbar));
    result.add(new CmsDeleteMenuEntry(hoverbar));
    return result;
  }
}
",1
1,8,3,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
1,2,1,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
1,2,1,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
1,3,2,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
1,2,1,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
2,5,4,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
2,4,3,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
4,8,5,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
4,10,10,4,0.5,1.0,0.0,0.0,0.714285714,1.0,918.3333333,0.170606495,0.75,1.0,2755.0,0.511819486,0.694329858,0.793103448,5.611111111,10,0.25862069,2,1.739583333,12,100.0,7.775862069,37,0.495496901,0.166666667,0.87988269,0.033333333,0.2,0.033333333,0.115384615,0.0,6.714285714,0.0,15.13043478,0.826086957,32.95652174,0.0,1.52173913,0.0,0.066666667,0.5,0.391304348,16.34782609,12,32,5,64,5,0,403,6,3.848860757,603.9395514,35,30,30,35,1,1,30,30,30,1,27,1,30,30,30,30,73.82857143,33.85714286,75.97142857,33.61038961,75.88571429,33.79220779,0.0,0.0,0.0,0.0,0,0.0,76.0,33.55844156,0.172489083,0.256550218,0.097161572,0.0,0.0,0.0,0.063318777,1.487341772,0.563291139,0.0,0.0,0.0,0.367088608,0.378723404,0.0,0.0,0.0,0.246808511,0.0,0.0,0.0,0.651685393,,,,,,,3,3,2.5,2,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$OpenCMSCore_seekFile {
  // org.opencms.jlan.CmsJlanNetworkFile.seekFile(long,int)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public long seekFile(long pos, int typ) throws IOException {
    try {
      load(true);
      switch (typ) {
          // From current position
        case SeekType.CurrentPos:
          m_buffer.seek(m_buffer.getPosition() + pos);
          break;
          // From end of file
        case SeekType.EndOfFile:
          long newPos = m_buffer.getLength() + pos;
          m_buffer.seek(newPos);
          break;
          // From start of file
        case SeekType.StartOfFile:
        default:
          m_buffer.seek(pos);
          break;
      }
      return m_buffer.getPosition();
    } catch (CmsException e) {
      throw new IOException(e);
    }
  }
}
",1
1,8,3,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
1,8,3,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
1,6,1,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
4,3,3,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",0
1,2,1,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
2,5,4,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
4,5,2,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
1,2,1,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
4,10,10,5,1.0,1.0,17.0,0.000252794,1.0,1.0,715.2272727,0.218853435,1.0,1.0,2192.0,1.0,0.184699863,0.7265625,5.553398058,12,1.1015625,7,3.731343284,16,100.0,9.8125,37,0.316712158,0.079056942,0.984250984,0.173076923,0.057142857,0.057692308,0.186440678,0.192307692,7.120879121,0.125,19.58333333,0.5,40.5,0.041666667,1.895833333,0.083333333,0.038461538,1.0,0.5,21.10416667,16,48,2,89,8,3,1167,15,3.827446245,1852.324932,70,51,52,70,52,51,52,52,65,51,52,52,52,51,52,52,102.9857143,68.98076923,103.0,68.75961538,102.8571429,68.56730769,103.0,68.90384615,103.0,69.0,103,68.33653846,102.9428571,68.69230769,0.264750378,0.245461422,0.034795764,0.001891074,0.001134644,0.002269289,0.066565809,0.927142857,0.131428571,0.007142857,0.004285714,0.008571429,0.251428571,0.141756549,0.00770416,0.004622496,0.009244992,0.271186441,0.054347826,0.032608696,0.065217391,1.913043478,0.6,1.2,35.2,2.0,58.66666667,29.33333333,35,54,4.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$OpenCMSCore_execute {
  // org.opencms.main.CmsShell.execute(java.io.Reader)
  /**
   * Executes the commands from the given reader in this shell.
   *
   * <p>
   *
   * <ul>
   *   <li>Commands in the must be separated with a line break '\n'.
   *   <li>Only one command per line is allowed.
   *   <li>String parameters must be quoted like this: <code>'string value'</code>.
   * </ul>
   *
   * @param reader the reader from which the commands are read
   */
  // SNIPPET_STARTS
  public void execute(Reader reader) {
    try {
      LineNumberReader lnr = new LineNumberReader(reader);
      while (!m_exitCalled) {
        String line = lnr.readLine();
        if (line != null) {
          if (m_interactive || m_echo) {
            // print the prompt in front of the commands to process only when 'interactive'
            printPrompt();
          }
        } else {
          // if null the file has been read to the end
          try {
            Thread.sleep(500);
          } catch (Throwable t) {
            // noop
          }
          // end the while loop
          break;
        }
        if (line.trim().startsWith(""#"")) {
          m_out.println(line);
          continue;
        }
        StringReader lineReader = new StringReader(line);
        StreamTokenizer st = new StreamTokenizer(lineReader);
        st.eolIsSignificant(true);
        st.wordChars('*', '*');
        // put all tokens into a List
        List<String> parameters = new ArrayList<String>();
        while (st.nextToken() != StreamTokenizer.TT_EOF) {
          if (st.ttype == StreamTokenizer.TT_NUMBER) {
            parameters.add(Integer.toString(new Double(st.nval).intValue()));
          } else {
            parameters.add(st.sval);
          }
        }
        lineReader.close();
        if (parameters.size() == 0) {
          // empty line, just need to check if echo is on
          if (m_echo) {
            m_out.println();
          }
          continue;
        }
        // extract command and arguments
        String command = parameters.get(0);
        List<String> arguments = parameters.subList(1, parameters.size());
        // execute the command with the given arguments
        executeCommand(command, arguments);
      }
    } catch (Throwable t) {
      t.printStackTrace(m_err);
    }
  }
}
",1
1,8,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,2,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,6,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
4,3,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",1
1,2,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",1
2,5,4,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",1
1,4,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",1
1,2,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",1
4,7,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",1
4,10,2,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",1
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
1,4,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",1
4,3,3,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",1
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
1,3,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",1
4,5,2,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",1
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",1
4,7,3,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
2,2,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
1,2,1,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
2,3,3,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
1,2,1,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
1,1,1,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
1,2,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
2,8,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
4,10,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
4,10,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",1
1,2,1,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
1,5,5,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
1,4,1,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
1,4,4,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
1,1,1,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
1,4,3,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
2,2,1,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
4,10,2,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
4,10,2,2,0.9375,0.9,1.0,0.0,0.9375,0.9,621.75,0.024060233,0.9375,0.9,1843.0,0.048120466,0.314037114,0.98245614,4.686390533,8,0.0,0,11.39428571,24,0.0,5.368421053,57,0.0,1.0,0.0,0.322580645,0.290322581,0.612903226,0.043478261,0.0,8.0,0.0,0.0,0.181818182,59.77272727,0.0,5.636363636,1.136363636,0.0,1.0,0.818181818,3.727272727,22,0,3,87,9,5,182,28,4.595856079,1283.110025,31,22,22,22,1,1,22,31,22,1,22,31,1,22,22,22,0.0,0.0,89.0,25.71111111,89.0,29.88888889,0.0,0.0,88.96774194,25.51111111,0,0.0,88.58064516,26.61111111,0.0,0.433948339,0.01402214,0.0,0.392619926,0.0,0.095202952,,,,,,,0.032312925,0.0,0.904761905,0.0,0.219387755,0.0,28.0,0.0,6.789473684,,,,0.0,0.242481203,,84,84,1.0,0,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$SpringBatch_testArtifactUniqueness {
  // org.springframework.batch.core.jsr.configuration.xml.JsrBeanDefinitionDocumentReaderTests.testArtifactUniqueness()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testArtifactUniqueness() throws Exception {
    JobExecution jobExecution = runJob(""jsrUniqueInstanceTests"", new Properties(), 10000L);
    String exitStatus = jobExecution.getExitStatus();
    assertTrue(""Exit status must contain listener3"", exitStatus.contains(""listener3""));
    exitStatus = exitStatus.replace(""listener3"", """");
    assertTrue(""Exit status must contain listener2"", exitStatus.contains(""listener2""));
    exitStatus = exitStatus.replace(""listener2"", """");
    assertTrue(""Exit status must contain listener1"", exitStatus.contains(""listener1""));
    exitStatus = exitStatus.replace(""listener1"", """");
    assertTrue(""Exit status must contain listener0"", exitStatus.contains(""listener0""));
    exitStatus = exitStatus.replace(""listener0"", """");
    assertTrue(""Exit status must contain listener7"", exitStatus.contains(""listener7""));
    exitStatus = exitStatus.replace(""listener7"", """");
    assertTrue(""Exit status must contain listener6"", exitStatus.contains(""listener6""));
    exitStatus = exitStatus.replace(""listener6"", """");
    assertTrue(""Exit status must contain listener5"", exitStatus.contains(""listener5""));
    exitStatus = exitStatus.replace(""listener5"", """");
    assertTrue(""Exit status must contain listener4"", exitStatus.contains(""listener4""));
    exitStatus = exitStatus.replace(""listener4"", """");
    assertTrue(""exitStatus must be empty"", """".equals(exitStatus));
  }
}
",1
1,2,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",1
1,5,5,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",1
1,4,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",1
1,4,4,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
1,1,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",1
1,3,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
2,8,2,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
4,10,2,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",1
4,10,7,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",1
1,2,1,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
2,3,3,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
1,4,1,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
1,4,4,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
1,1,1,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
1,4,3,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
2,8,2,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",0
4,10,2,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",1
4,10,7,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",0
1,2,1,3,0.5,0.17295,18.0,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1.0,2755.0,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100.0,5.323232323,45,0.693351121,0.414039336,1.0,0.096774194,0.147058824,0.064516129,0.037037037,0.0,10.16981132,0.0,0.0,0.730769231,28.69230769,0.0,2.038461538,0.0,0.0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0.0,0.0,97.97058824,32.47474747,98.0,32.07070707,0.0,0.0,97.94117647,32.88888889,0,0.0,97.97058824,32.47474747,0.0,0.526804124,0.089690722,0.0,0.150515464,0.0,0.090721649,,,,,,,0.170254403,0.0,0.285714286,0.0,0.17221135,0.0,1.67816092,0.0,1.011494253,,,,0.0,0.602739726,,25,27,4.0,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",1
2,2,2,3,0.5,0.17295,18.0,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1.0,2755.0,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100.0,5.323232323,45,0.693351121,0.414039336,1.0,0.096774194,0.147058824,0.064516129,0.037037037,0.0,10.16981132,0.0,0.0,0.730769231,28.69230769,0.0,2.038461538,0.0,0.0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0.0,0.0,97.97058824,32.47474747,98.0,32.07070707,0.0,0.0,97.94117647,32.88888889,0,0.0,97.97058824,32.47474747,0.0,0.526804124,0.089690722,0.0,0.150515464,0.0,0.090721649,,,,,,,0.170254403,0.0,0.285714286,0.0,0.17221135,0.0,1.67816092,0.0,1.011494253,,,,0.0,0.602739726,,25,27,4.0,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",1
1,4,1,3,0.5,0.17295,18.0,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1.0,2755.0,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100.0,5.323232323,45,0.693351121,0.414039336,1.0,0.096774194,0.147058824,0.064516129,0.037037037,0.0,10.16981132,0.0,0.0,0.730769231,28.69230769,0.0,2.038461538,0.0,0.0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0.0,0.0,97.97058824,32.47474747,98.0,32.07070707,0.0,0.0,97.94117647,32.88888889,0,0.0,97.97058824,32.47474747,0.0,0.526804124,0.089690722,0.0,0.150515464,0.0,0.090721649,,,,,,,0.170254403,0.0,0.285714286,0.0,0.17221135,0.0,1.67816092,0.0,1.011494253,,,,0.0,0.602739726,,25,27,4.0,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",1
1,4,4,3,0.5,0.17295,18.0,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1.0,2755.0,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100.0,5.323232323,45,0.693351121,0.414039336,1.0,0.096774194,0.147058824,0.064516129,0.037037037,0.0,10.16981132,0.0,0.0,0.730769231,28.69230769,0.0,2.038461538,0.0,0.0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0.0,0.0,97.97058824,32.47474747,98.0,32.07070707,0.0,0.0,97.94117647,32.88888889,0,0.0,97.97058824,32.47474747,0.0,0.526804124,0.089690722,0.0,0.150515464,0.0,0.090721649,,,,,,,0.170254403,0.0,0.285714286,0.0,0.17221135,0.0,1.67816092,0.0,1.011494253,,,,0.0,0.602739726,,25,27,4.0,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",1
1,1,1,3,0.5,0.17295,18.0,0.000101187,0.820833333,0.516135,619.0769231,0.103260322,0.9375,1.0,2755.0,0.511819486,0.624509215,0.797979798,5.590361446,10,0.050505051,3,1.959677419,9,100.0,5.323232323,45,0.693351121,0.414039336,1.0,0.096774194,0.147058824,0.064516129,0.037037037,0.0,10.16981132,0.0,0.0,0.730769231,28.69230769,0.0,2.038461538,0.0,0.0,0.967741935,0.384615385,1.653846154,32,0,3,66,6,0,89,8,4.984285075,879.0548903,34,30,30,33,1,1,30,30,33,1,30,1,1,30,30,30,0.0,0.0,97.97058824,32.47474747,98.0,32.07070707,0.0,0.0,97.94117647,32.88888889,0,0.0,97.97058824,32.47474747,0.0,0.526804124,0.089690722,0.0,0.150515464,0.0,0.090721649,,,,,,,0.170254403,0.0,0.285714286,0.0,0.17221135,0.0,1.67816092,0.0,1.011494253,,,,0.0,0.602739726,,25,27,4.0,0,13,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$SpringBatch_initWriterForSimpleCallbackTests {
  // org.springframework.batch.item.xml.StaxEventItemWriterTests.initWriterForSimpleCallbackTests()
  // SNIPPET_STARTS
  private void initWriterForSimpleCallbackTests() throws Exception {
    writer = createItemWriter();
    writer.setHeaderCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createStartElement(
                      ""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setFooterCallback(
        new StaxWriterCallback() {

          @Override
          public void write(XMLEventWriter writer) throws IOException {
            XMLEventFactory factory = XMLEventFactory.newInstance();
            try {
              writer.add(
                  factory.createEndElement(""ns"", ""https://www.springframework.org/test"", ""group""));
            } catch (XMLStreamException e) {
              throw new RuntimeException(e);
            }
          }
        });
    writer.setRootTagName(""{https://www.springframework.org/test}ns:testroot"");
    writer.afterPropertiesSet();
  }
}
",1
4,3,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,3,1,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
1,6,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,2,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
1,3,2,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
2,8,2,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,2,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,8,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
3,8,7,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
1,2,1,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",0
1,2,1,4,0.96875,0.0,11.0,7.53e-05,0.993055556,0.186447222,1634.0,0.049917156,1.0,1.0,4477.0,0.144541134,0.269684702,0.920289855,4.582677165,10,0.0,0,2.38172043,9,0.0,9.130434783,45,0.524781294,0.297044263,0.882352941,0.266666667,0.1,0.333333333,0.035714286,0.033333333,8.375,0.037037037,14.51851852,0.888888889,51.0,0.037037037,2.962962963,0.037037037,0.1,1.2,0.703703704,17.18518519,23,28,6,100,8,1,464,8,4.354108284,1518.987539,30,30,29,30,30,30,30,28,29,30,30,30,30,30,30,30,0.0,0.0,99.96666667,28.82178218,100.0,28.82178218,0.0,0.0,100.0,29.0,0,0.0,99.8,28.74257426,0.0,0.477124183,0.068990559,0.0,0.013071895,0.0,0.10530138,,,,,,,0.144596651,0.0,0.02739726,0.0,0.220700152,0.0,0.189473684,0.0,1.526315789,,,,0.0,8.055555556,,25,25,3.0,2,14,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$CarReport_handleFABClick {
  // me.kuehle.carreport.gui.MainActivity.handleFABClick(int,int)
  // SNIPPET_STARTS
  private void handleFABClick(final int edit, final int otherType) {
    closeFABMenu();
    Preferences prefs = new Preferences(this);
    CarCursor car =
        new CarSelection()
            .suspendedSince((Date) null)
            .query(
                getContentResolver(), CarColumns.ALL_COLUMNS, CarColumns.NAME + "" COLLATE UNICODE"");
    if (car.getCount() == 1 || !prefs.isShowCarMenu()) {
      Intent intent = getDetailActivityIntent(edit, prefs.getDefaultCar(), otherType);
      startActivityForResult(intent, REQUEST_ADD_DATA + edit);
    } else {
      final long[] carIds = new long[car.getCount()];
      final String[] carNames = new String[car.getCount()];
      while (car.moveToNext()) {
        carIds[car.getPosition()] = car.getId();
        carNames[car.getPosition()] = car.getName();
      }
      new Builder(this)
          .setItems(
              carNames,
              new DialogInterface.OnClickListener() {

                // @Override // Removed to allow compilation
                public void onClick(DialogInterface dialog, int which) {
                  Intent intent = getDetailActivityIntent(edit, carIds[which], otherType);
                  startActivityForResult(intent, REQUEST_ADD_DATA + edit);
                }
              })
          .create()
          .show();
    }
  }
}
",0
1,3,2,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
1,8,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,2,1,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
2,4,4,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
1,8,3,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
4,5,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,3,1,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,2,2,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",0
1,4,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
2,4,2,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,1,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
4,3,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
3,8,7,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,3,3,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
1,2,1,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
1,3,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
1,3,1,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
4,5,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,2,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
1,2,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,4,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,3,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
4,10,7,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
1,4,4,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
1,2,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,3,1,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
2,4,2,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
1,3,3,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
2,8,2,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
4,7,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,3,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",0
1,4,4,3,0.916666667,0.0,0.0,0.0,0.958333333,0.333333333,3145.782609,0.05360382,1.0,1.0,10214.0,0.167139076,0.284983337,0.808259587,4.099071207,10,0.569321534,6,2.216080402,18,100.0,10.24188791,52,0.329240971,0.188982237,0.606091527,0.192982456,0.136363636,0.245614035,0.020408163,0.035087719,11.20422535,0.041666667,12.5,0.333333333,52.95833333,0.0,2.958333333,0.083333333,0.105263158,0.877192982,0.958333333,13.9375,29,32,2,86,6,1,746,28,4.577846152,2383.069903,66,57,57,66,57,57,57,57,66,1,57,57,57,53,57,57,83.63636364,65.0,84.87878788,64.84883721,84.93939394,64.86046512,0.0,0.0,0.0,0.0,0,0.0,84.92424242,64.73255814,0.161332893,0.526228967,0.021774992,0.0,0.0,0.0,0.069943913,3.261758691,0.134969325,0.0,0.0,0.0,0.433537832,0.04137931,0.0,0.0,0.0,0.132915361,0.0,0.0,0.0,3.212121212,,,,,,,118,130,2.333333333,2,29,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$CarReport_showFullScreenChart {
  // me.kuehle.carreport.gui.ReportFragment.showFullScreenChart(me.kuehle.carreport.data.report.AbstractReport,lecho.lib.hellocharts.view.ComboLineColumnChartView)
  // SNIPPET_STARTS
  private void showFullScreenChart(AbstractReport report, ComboLineColumnChartView v) {
    if (getView() == null) {
      return;
    }
    if (mFullScreenChartAnimator != null) {
      mFullScreenChartAnimator.cancel();
    }
    mCurrentFullScreenChart = v;
    ReportChartOptions options = loadReportChartOptions(getContext(), report);
    mFullScreenChart.setComboLineColumnChartData(report.getChartData(options));
    applyViewport(mFullScreenChart, false);
    // Calculate translation start and end point and scales.
    mCurrentFullScreenStartBounds = new Rect();
    final Rect finalBounds = new Rect();
    final Point globalOffset = new Point();
    mCurrentFullScreenChart.getGlobalVisibleRect(mCurrentFullScreenStartBounds);
    getView().getGlobalVisibleRect(finalBounds, globalOffset);
    mCurrentFullScreenStartBounds.offset(-globalOffset.x, -globalOffset.y);
    finalBounds.offset(-globalOffset.x, -globalOffset.y);
    mCurrentFullScreenStartScaleX =
        (float) mCurrentFullScreenStartBounds.width() / finalBounds.width();
    mCurrentFullScreenStartScaleY =
        (float) mCurrentFullScreenStartBounds.height() / finalBounds.height();
    // Hide the small chart and show the zoomed-in view. When the animation
    // begins, it will position the zoomed-in view in the place of the small
    // chart.
    mCurrentFullScreenChart.setVisibility(View.INVISIBLE);
    mFullScreenChartHolder.setVisibility(View.VISIBLE);
    // Set the pivot point for SCALE_X and SCALE_Y transformations to the
    // top-left corner of the zoomed-in view (the default is the center of
    // the view).
    mFullScreenChartHolder.setPivotX(0f);
    mFullScreenChartHolder.setPivotY(0f);
    // Construct and run the parallel animation of the four translation and
    // scale properties (X, Y, SCALE_X, and SCALE_Y).
    AnimatorSet set = new AnimatorSet();
    set.play(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder,
                View.X,
                mCurrentFullScreenStartBounds.left,
                finalBounds.left))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.Y, mCurrentFullScreenStartBounds.top, finalBounds.top))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_X, mCurrentFullScreenStartScaleX, 1f))
        .with(
            ObjectAnimator.ofFloat(
                mFullScreenChartHolder, View.SCALE_Y, mCurrentFullScreenStartScaleY, 1f));
    set.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));
    set.addListener(
        new AnimatorListenerAdapter() {

          // @Override // Removed to allow compilation
          public void onAnimationEnd(Animator animation) {
            mFullScreenChartAnimator = null;
            mAppBarLayout.setVisibility(View.INVISIBLE);
          }
        });
    set.start();
    mFullScreenChartAnimator = set;
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,3,3,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",0
1,3,2,4,0.916666667,1.0,7.0,0.000540833,0.981481481,1.0,545.3636364,0.000540833,1.0,1.0,1843.0,0.000540833,0.479301035,0.758928571,5.341176471,11,4.607142857,13,5.925,17,100.0,6.928571429,30,0.562913117,0.149071198,0.933333333,0.171428571,0.01754386,0.085714286,0.37037037,0.028571429,7.813333333,0.117647059,12.94117647,0.470588235,38.58823529,0.0,2.205882353,0.0,0.285714286,0.857142857,0.117647059,15.52941176,22,32,3,92,9,0,795,29,4.183918218,944.48167,57,35,35,57,35,35,35,34,54,1,35,1,35,35,35,35,91.96491228,56.0,91.98245614,55.82795699,91.98245614,55.88172043,0.0,0.0,91.98245614,55.95698925,0,0.0,91.8245614,55.76344086,0.448507776,0.194199243,0.03320723,0.0,0.071458596,0.0,0.039932745,0.432989691,0.074039363,0.0,0.159325211,0.0,0.089034677,0.170995671,0.0,0.367965368,0.0,0.205627706,0.0,2.151898734,0.0,1.202531646,,,,0.0,0.558823529,,50,70,2.833333333,2,19,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Pom_loadClass {
  // jenkins.util.AntClassLoader.loadClass(java.lang.String,boolean)
  /**
   * Loads a class with this class loader.
   *
   * <p>This class attempts to load the class in an order determined by whether or not the class
   * matches the system/loader package lists, with the loader package list taking priority. If the
   * classloader is in isolated mode, failure to load the class in this loader will result in a
   * ClassNotFoundException.
   *
   * @param classname The name of the class to be loaded. Must not be <code>null</code>.
   * @param resolve <code>true</code> if all classes upon which this class depends are to be loaded.
   * @return the required Class object
   * @exception ClassNotFoundException if the requested class does not exist on the system classpath
   *     (when not in isolated mode) or this loader's classpath.
   */
  // SNIPPET_STARTS
  protected synchronized Class loadClass(String classname, boolean resolve)
      throws ClassNotFoundException {
    // 'sync' is needed - otherwise 2 threads can load the same class
    // twice, resulting in LinkageError: duplicated class definition.
    // findLoadedClass avoids that, but without sync it won't work.
    Class theClass = findLoadedClass(classname);
    if (theClass != null) {
      return theClass;
    }
    if (isParentFirst(classname)) {
      try {
        theClass = findBaseClass(classname);
        log(
            ""Class "" + classname + "" loaded from parent loader "" + ""(parentFirst)"",
            Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader "" + ""(parentFirst)"", Project.MSG_DEBUG);
      }
    } else {
      try {
        theClass = findClass(classname);
        log(""Class "" + classname + "" loaded from ant loader"", Project.MSG_DEBUG);
      } catch (ClassNotFoundException cnfe) {
        if (ignoreBase) {
          throw cnfe;
        }
        theClass = findBaseClass(classname);
        log(""Class "" + classname + "" loaded from parent loader"", Project.MSG_DEBUG);
      }
    }
    if (resolve) {
      resolveClass(theClass);
    }
    return theClass;
  }
}
",0
1,3,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,3,1,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
4,10,10,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",0
2,8,2,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",0
4,10,7,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
4,10,7,3,0.875,0.0,31.0,0.005374101,0.96875,0.1912625,1208.125,0.005374101,1.0,0.647575,1843.0,0.005374101,0.654066205,0.845238095,5.095890411,10,0.178571429,1,1.892156863,10,100.0,11.75,45,0.427113299,0.226455407,0.707106781,0.060606061,0.235294118,0.060606061,0.038461538,0.0,8.980769231,0.04,0.0,0.52,25.28,0.0,2.08,0.16,0.0,0.666666667,0.28,1.4,51,0,3,84,7,2,73,7,4.852884667,735.9083149,34,33,33,34,1,33,33,33,31,1,31,1,1,31,33,33,85.0,32.61627907,85.0,32.76744186,84.91176471,32.70930233,0.0,0.0,84.94117647,32.52325581,0,0.0,84.85294118,32.8255814,0.03030303,0.561983471,0.097796143,0.0,0.063360882,0.0,0.099173554,18.54545455,3.227272727,0.0,2.090909091,0.0,3.272727273,0.174019608,0.0,0.112745098,0.0,0.176470588,0.0,0.647887324,0.0,1.014084507,,,,0.0,1.565217391,,22,22,3.333333333,0,10,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$SpringBatch_testCustomRecordSeparatorMultilineBlankLineAfterEnd {
  // org.springframework.batch.item.file.FlatFileItemReaderTests.testCustomRecordSeparatorMultilineBlankLineAfterEnd()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testCustomRecordSeparatorMultilineBlankLineAfterEnd() throws Exception {
    reader.setRecordSeparatorPolicy(
        new RecordSeparatorPolicy() {

          // 1 record = 2 lines
          boolean pair = true;

          @Override
          public boolean isEndOfRecord(String line) {
            if (StringUtils.hasText(line)) {
              pair = !pair;
            }
            return pair;
          }

          @Override
          public String postProcess(String record) {
            return StringUtils.hasText(record) ? record : null;
          }

          @Override
          public String preProcess(String record) {
            return record;
          }
        });
    reader.setResource(getInputResource(""testLine1\ntestLine2\n\n""));
    reader.open(executionContext);
    assertEquals(""testLine1testLine2"", reader.read());
    assertEquals(null, reader.read());
  }
}
",0
1,3,2,2,0.75,0.0,16.0,0.001978491,0.75,0.0,5353.413793,0.086660716,0.75,0.0,11904.0,0.167139076,0.141092256,0.789090909,3.846153846,11,0.0,0,3.015060241,20,0.0,8.254545455,45,0.252004307,0.138675049,0.421997858,0.142857143,0.102040816,0.142857143,0.022222222,0.0,9.454545455,0.0,10.27272727,0.5,46.40909091,0.0,3.0,0.0,0.0,1.020408163,0.977272727,11.72727273,33,16,5,106,8,0,516,30,4.621689901,2117.798355,49,49,49,49,1,1,48,49,44,1,49,1,1,47,49,48,0.0,0.0,106.0,47.87850467,105.9387755,47.77570093,0.0,0.0,0.0,0.0,0,0.0,105.8571429,47.73831776,0.0,0.611165524,0.045053869,0.0,0.0,0.0,0.091087169,,,,,,,0.073717949,0.0,0.0,0.0,0.149038462,0.0,0.0,0.0,2.02173913,,,,,,,200,283,3.0,1,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$CarReport_onCreate {
  // me.kuehle.carreport.gui.dialog.SetupWebDavSyncDialogActivity.onCreate(android.os.Bundle)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_setup_webdav_sync);
    getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    mEdtUrl = (EditText) findViewById(R.id.edt_url);
    mEdtUrl.addTextChangedListener(
        new TextWatcher() {

          // @Override // Removed to allow compilation
          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

          // @Override // Removed to allow compilation
          public void onTextChanged(CharSequence s, int start, int before, int count) {}

          // @Override // Removed to allow compilation
          public void afterTextChanged(Editable s) {
            mTxtTrustCertificateDescription.setVisibility(View.GONE);
            mTxtTrustCertificate.setVisibility(View.GONE);
            mChkTrustCertificate.setChecked(false);
            mChkTrustCertificate.setVisibility(View.GONE);
          }
        });
    mEdtUserName = (EditText) findViewById(R.id.edt_user_name);
    mEdtPassword = (EditText) findViewById(R.id.edt_password);
    mTxtTrustCertificateDescription =
        (TextView) findViewById(R.id.txt_trust_certificate_description);
    mTxtTrustCertificate = (TextView) findViewById(R.id.txt_trust_certificate);
    mChkTrustCertificate = (CheckBox) findViewById(R.id.chk_trust_certificate);
    mTxtTrustCertificateDescription.setVisibility(View.GONE);
    mTxtTrustCertificate.setVisibility(View.GONE);
    mChkTrustCertificate.setVisibility(View.GONE);
    mBtnOk = (Button) findViewById(R.id.btn_ok);
    mBtnOk.setOnClickListener(
        new View.OnClickListener() {

          // @Override // Removed to allow compilation
          public void onClick(View v) {
            onOkClick();
          }
        });
    findViewById(R.id.btn_cancel)
        .setOnClickListener(
            new View.OnClickListener() {

              // @Override // Removed to allow compilation
              public void onClick(View v) {
                setResult(Activity.RESULT_CANCELED);
                finish();
              }
            });
  }
}
",0
4,5,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,4,4,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",0
1,3,2,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
4,5,2,4,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,1.0,0.5,0.136095112,0.0,0.772827685,0.972222222,4.542857143,8,2.388888889,7,4.953488372,15,100.0,9.555555556,37,0.902948627,0.856348839,0.966091783,0.166666667,0.0,0.083333333,0.333333333,0.166666667,9.75,0.166666667,0.25,0.333333333,27.75,0.0,2.0,0.0,0.0,0.833333333,0.583333333,2.666666667,24,3,1,91,6,0,235,20,4.901690841,299.5579126,49,12,12,49,12,12,12,10,34,1,12,1,1,12,12,12,98.95918367,47.92,99.0,47.78,99.0,47.17,0.0,0.0,98.91836735,47.83,0,0.0,98.79591837,47.67,0.825265099,0.089442139,0.007376671,0.0,0.022591056,0.0,0.017980636,0.108379888,0.008938547,0.0,0.027374302,0.0,0.021787709,0.082474227,0.0,0.25257732,0.0,0.201030928,0.0,3.0625,0.0,2.4375,,,,0.0,0.795918367,,52,106,3.0,1,5,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$HibernateORM_getOverriddenColumn {
  // org.hibernate.cfg.AbstractPropertyHolder.getOverriddenColumn(java.lang.String)
  /**
   * Get column overriding, property first, then parent, then holder replace the placeholder
   * 'collection&&element' with nothing
   *
   * <p>These rules are here to support both JPA 2 and legacy overriding rules.
   */
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public Column[] getOverriddenColumn(String propertyName) {
    Column[] result = getExactOverriddenColumn(propertyName);
    if (result == null) {
      // the commented code can be useful if people use the new prefixes on old mappings and vice
      // versa
      // if we enable them:
      // WARNING: this can conflict with user's expectations if:
      // - the property uses some restricted values
      // - the user has overridden the column
      // also change getOverriddenJoinColumn and getOverriddenJoinTable as well
      // if ( propertyName.contains( "".key."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".key."", "".index.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".key"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".key"".length() ) + "".index""
      // );
      // }
      // if ( result == null && propertyName.contains( "".value."" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn( propertyName.replace( "".value."", "".element.""  ) );
      // }
      // if ( result == null && propertyName.endsWith( "".value"" ) ) {
      // //support for legacy @AttributeOverride declarations
      // //TODO cache the underlying regexp
      // result = getExactOverriddenColumn(
      // propertyName.substring( 0, propertyName.length() - "".value"".length() ) + "".element""
      // );
      // }
      if (result == null && propertyName.contains("".collection&&element."")) {
        // support for non map collections where no prefix is needed
        // TODO cache the underlying regexp
        result = getExactOverriddenColumn(propertyName.replace("".collection&&element."", "".""));
      }
    }
    return result;
  }
}
",0
1,3,2,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
2,5,4,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",0
2,8,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
1,3,1,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",0
1,3,1,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",0
4,10,2,7,0.75,1.0,0.0,0.0,0.75,1.0,0.001849894,0.061222559,0.75,1.0,0.024841438,1.0,0.327948004,0.838709677,4.687179487,11,0.032258065,1,4.180379747,25,100.0,6.612903226,44,0.411582867,0.068041382,0.881917104,0.188405797,0.0,0.072463768,0.014285714,0.101449275,7.917197452,0.072463768,13.01449275,0.434782609,38.2173913,0.043478261,2.275362319,0.028985507,0.072463768,0.869565217,0.594202899,14.44927536,30,32,3,100,13,1,1021,17,4.065431924,2537.665601,70,69,69,70,69,69,69,69,55,69,69,69,69,66,67,69,100.0,69.0,99.98571429,68.84158416,99.85714286,68.77227723,98.94285714,68.53465347,99.95714286,68.87128713,0,0.0,99.87142857,68.73267327,0.006456513,0.410558299,0.042916825,0.00075959,0.08355488,0.0,0.088492214,63.58823529,6.647058824,0.117647059,12.94117647,0.0,13.70588235,0.10453284,0.001850139,0.203515264,0.0,0.215541166,0.017699115,1.946902655,0.0,2.061946903,110.0,0.0,116.5,0.0,1.059090909,,60,63,3.4,0,44,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Phoenix_process {
  // org.apache.phoenix.flume.sink.PhoenixSink.process()
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public Status process() throws EventDeliveryException {
    Status status = Status.READY;
    Channel channel = getChannel();
    Transaction transaction = null;
    List<Event> events = Lists.newArrayListWithExpectedSize(this.batchSize);
    long startTime = System.nanoTime();
    try {
      transaction = channel.getTransaction();
      transaction.begin();
      for (long i = 0; i < this.batchSize; i++) {
        Event event = channel.take();
        if (event == null) {
          status = Status.BACKOFF;
          if (i == 0) {
            sinkCounter.incrementBatchEmptyCount();
          } else {
            sinkCounter.incrementBatchUnderflowCount();
          }
          break;
        } else {
          events.add(event);
        }
      }
      if (!events.isEmpty()) {
        if (events.size() == this.batchSize) {
          sinkCounter.incrementBatchCompleteCount();
        } else {
          sinkCounter.incrementBatchUnderflowCount();
          status = Status.BACKOFF;
        }
        // save to Hbase
        serializer.upsertEvents(events);
        sinkCounter.addToEventDrainSuccessCount(events.size());
      } else {
        logger.debug(""no events to process "");
        sinkCounter.incrementBatchEmptyCount();
        status = Status.BACKOFF;
      }
      transaction.commit();
    } catch (ChannelException e) {
      transaction.rollback();
      status = Status.BACKOFF;
      sinkCounter.incrementConnectionFailedCount();
    } catch (SQLException e) {
      sinkCounter.incrementConnectionFailedCount();
      transaction.rollback();
      logger.error(""exception while persisting to Hbase "", e);
      throw new EventDeliveryException(""Failed to persist message to Hbase"", e);
    } catch (Throwable e) {
      transaction.rollback();
      logger.error(""exception while processing in Phoenix Sink"", e);
      throw new EventDeliveryException(""Failed to persist message"", e);
    } finally {
      logger.info(
          String.format(
              ""Time taken to process [%s] events was [%s] seconds"",
              events.size(),
              TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)));
      if (transaction != null) {
        transaction.close();
      }
    }
    return status;
  }
}
",0
3,6,1,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,3,2,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
4,7,3,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
1,2,2,2,0.5,0.0,388.0,0.0,0.833333333,0.5,1479.25,0.0,1.0,1.0,1843.0,0.0,0.23838903,0.786982249,4.447368421,12,0.165680473,1,7.40625,31,100.0,6.591715976,37,0.0,1.0,0.0,0.56,0.142857143,0.34,0.023255814,0.0,6.80620155,0.0,0.19047619,0.166666667,32.71428571,0.0,3.071428571,0.952380952,0.34,0.7,0.595238095,3.404761905,22,1,3,83,7,6,170,28,5.071778572,1860.670538,56,48,50,56,1,1,50,50,31,1,32,50,50,49,47,50,85.0,54.90697674,84.98214286,54.73255814,84.91071429,54.79069767,84.98214286,54.96511628,84.98214286,54.96511628,0,0.0,84.83928571,54.81395349,0.069767442,0.495527728,0.016696482,0.008944544,0.157423971,0.0,0.1019678,7.102564103,0.239316239,0.128205128,2.256410256,0.0,1.461538462,0.033694344,0.018050542,0.317689531,0.0,0.205776173,0.535714286,9.428571429,0.0,6.107142857,17.6,0.0,11.4,0.0,0.647727273,,50,65,1.0,0,34,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Antlr4Master_testToStringStartStop2 {
  // org.antlr.v4.test.runtime.java.api.TestTokenStreamRewriter.testToStringStartStop2()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testToStringStartStop2() throws Exception {
    LexerGrammar g =
        new LexerGrammar(
            ""lexer grammar T;\n""
                + ""ID : 'a'..'z'+;\n""
                + ""INT : '0'..'9'+;\n""
                + ""SEMI : ';';\n""
                + ""ASSIGN : '=';\n""
                + ""PLUS : '+';\n""
                + ""MULT : '*';\n""
                + ""WS : ' '+;\n"");
    // Tokens: 012345678901234567
    // Input:  x = 3 * 0 + 2 * 0;
    String input = ""x = 3 * 0 + 2 * 0;"";
    LexerInterpreter lexEngine = g.createLexerInterpreter(new ANTLRInputStream(input));
    CommonTokenStream stream = new CommonTokenStream(lexEngine);
    stream.fill();
    TokenStreamRewriter tokens = new TokenStreamRewriter(stream);
    String result = tokens.getTokenStream().getText();
    String expecting = ""x = 3 * 0 + 2 * 0;"";
    assertEquals(expecting, result);
    tokens.replace(4, 8, ""0"");
    stream.fill();
    // replace 3 * 0 with 0
    result = tokens.getText();
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 17));
    expecting = ""x = 0 + 2 * 0;"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(4, 8));
    expecting = ""0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    expecting = ""x = 0"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(12, 16));
    expecting = ""2 * 0"";
    assertEquals(expecting, result);
    tokens.insertAfter(17, ""// comment"");
    result = tokens.getText(Interval.of(12, 18));
    expecting = ""2 * 0;// comment"";
    assertEquals(expecting, result);
    result = tokens.getText(Interval.of(0, 8));
    stream.fill();
    // try again after insert at end
    expecting = ""x = 0"";
    assertEquals(expecting, result);
  }
}
",0
1,2,1,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
1,3,2,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
4,10,2,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,3,1,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,2,1,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",0
1,3,1,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,3,1,2,0.666666667,0.0,0.005021415,0.004173861,0.88697318,0.597434483,0.005021415,0.004173861,1.0,1.0,0.005021415,0.004173861,0.504893064,0.776785714,5.825842697,10,0.200892857,1,6.121338912,34,100.0,8.348214286,45,0.0,1.0,0.0,0.0,0.027027027,1.090909091,0.085714286,0.0,10.13740458,0.0,0.0,0.375,55.4375,0.0,4.09375,0.09375,0.0,1.484848485,0.78125,3.875,22,0,1,102,7,7,152,38,5.294405323,1839.406032,37,1,32,36,1,1,1,33,37,1,1,33,1,1,33,33,104.0,35.96190476,104.0,35.95238095,103.9459459,35.93333333,0.0,0.0,103.8378378,35.92380952,0,0.0,103.8918919,35.86666667,0.089197225,0.547076313,0.020317146,0.0,0.164023786,0.0,0.086719524,6.133333333,0.227777778,0.0,1.838888889,0.0,0.972222222,0.037137681,0.0,0.299818841,0.0,0.158514493,0.0,8.073170732,0.0,4.268292683,,,,0.0,0.528700906,,312,818,1.0,0,29,"package FeatureExtraction.snippet_splitter_out;

public class TimesTenDialect extends Dialect {
  // SNIPPET_STARTS
  public TimesTenDialect() {
    super();
    registerColumnType(Types.BIT, ""TINYINT"");
    registerColumnType(Types.BIGINT, ""BIGINT"");
    registerColumnType(Types.SMALLINT, ""SMALLINT"");
    registerColumnType(Types.TINYINT, ""TINYINT"");
    registerColumnType(Types.INTEGER, ""INTEGER"");
    registerColumnType(Types.CHAR, ""CHAR(1)"");
    registerColumnType(Types.VARCHAR, ""VARCHAR($l)"");
    registerColumnType(Types.FLOAT, ""FLOAT"");
    registerColumnType(Types.DOUBLE, ""DOUBLE"");
    registerColumnType(Types.DATE, ""DATE"");
    registerColumnType(Types.TIME, ""TIME"");
    registerColumnType(Types.TIMESTAMP, ""TIMESTAMP"");
    registerColumnType(Types.VARBINARY, ""VARBINARY($l)"");
    registerColumnType(Types.NUMERIC, ""DECIMAL($p, $s)"");
    // TimesTen has no BLOB/CLOB support, but these types may be suitable
    // for some applications. The length is limited to 4 million bytes.
    registerColumnType(Types.BLOB, ""VARBINARY(4000000)"");
    registerColumnType(Types.CLOB, ""VARCHAR(4000000)"");

    getDefaultProperties().setProperty(Environment.USE_STREAMS_FOR_BINARY, ""true"");
    getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE);
    registerFunction(""lower"", new StandardSQLFunction(""lower""));
    registerFunction(""upper"", new StandardSQLFunction(""upper""));
    registerFunction(""rtrim"", new StandardSQLFunction(""rtrim""));
    registerFunction(""concat"", new StandardSQLFunction(""concat"", StandardBasicTypes.STRING));
    registerFunction(""mod"", new StandardSQLFunction(""mod""));
    registerFunction(""to_char"", new StandardSQLFunction(""to_char"", StandardBasicTypes.STRING));
    registerFunction(""to_date"", new StandardSQLFunction(""to_date"", StandardBasicTypes.TIMESTAMP));
    registerFunction(
        ""sysdate"", new NoArgSQLFunction(""sysdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(
        ""getdate"", new NoArgSQLFunction(""getdate"", StandardBasicTypes.TIMESTAMP, false));
    registerFunction(""nvl"", new StandardSQLFunction(""nvl""));
  }
}
",0
3,6,1,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,3,1,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,4,4,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
1,3,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
1,3,3,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
4,10,2,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,4,4,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",0
1,3,1,5,0.51754386,0.0,10.0,0.006267448,0.627952092,0.433575,84.5,0.089445944,0.730769231,1.0,159.0,0.172624439,0.25751695,0.594594595,3.8125,9,3.648648649,14,6.666666667,27,97.875,7.256756757,45,0.512342091,0.149071198,0.930949336,0.166666667,0.023809524,0.083333333,0.820512821,0.125,9.5,0.142857143,0.0,0.571428571,25.52380952,0.047619048,1.904761905,0.0,0.0,0.708333333,0.19047619,2.0,35,0,3,102,5,0,834,93,4.941086244,602.3153878,126,24,23,126,23,24,24,24,126,24,23,1,1,24,24,24,102.9761905,124.9711538,102.952381,124.5961538,102.984127,124.7884615,0.0,0.0,0.0,0.0,0,0.0,102.8174603,124.5,0.891547049,0.067340067,0.009392167,0.0,0.0,0.0,0.010809853,0.075531703,0.010534685,0.0,0.0,0.0,0.012124826,0.139473684,0.0,0.0,0.0,0.160526316,0.0,0.0,0.0,1.150943396,,,,,,,126,239,3.0,2,12,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Antlr4Master_hasSLLConflictTerminatingPrediction {
  // org.antlr.v4.runtime.atn.PredictionMode.hasSLLConflictTerminatingPrediction(org.antlr.v4.runtime.atn.PredictionMode,org.antlr.v4.runtime.atn.ATNConfigSet)
  // SNIPPET_STARTS
  public static boolean hasSLLConflictTerminatingPrediction(
      PredictionMode mode, ATNConfigSet configs) {
    /* Configs in rule stop states indicate reaching the end of the decision
     * rule (local context) or end of start rule (full context). If all
     * configs meet this condition, then none of the configurations is able
     * to match additional input so we terminate prediction.
     */
    if (allConfigsInRuleStopStates(configs)) {
      return true;
    }
    // pure SLL mode parsing
    if (mode == PredictionMode.SLL) {
      // Don't bother with combining configs from different semantic
      // contexts if we can fail over to full LL; costs more time
      // since we'll often fail over anyway.
      if (configs.hasSemanticContext) {
        // dup configs, tossing out semantic predicates
        ATNConfigSet dup = new ATNConfigSet();
        for (ATNConfig c : configs) {
          c = new ATNConfig(c, SemanticContext.NONE);
          dup.add(c);
        }
        configs = dup;
      }
      // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    Collection<BitSet> altsets = getConflictingAltSubsets(configs);
    boolean heuristic = hasConflictingAltSet(altsets) && !hasStateAssociatedWithOneAlt(configs);
    return heuristic;
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,3,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,4,3,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
1,3,2,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",0
1,4,4,4,0.5,0.0,216.0,0.126903577,0.611111111,0.0,318.0,0.126903577,0.833333333,0.0,352.0,0.126903577,0.335892916,0.763636364,4.25,12,0.4,2,2.596491228,10,100.0,7.0,30,0.470810482,0.11785113,1.0,0.216216216,0.071428571,0.054054054,0.15,0.324324324,4.7,0.088235294,15.05882353,0.823529412,30.97058824,0.0,1.470588235,0.029411765,0.054054054,0.675675676,0.088235294,16.88235294,29,28,6,118,10,1,630,10,3.508225253,971.7834751,42,37,36,42,37,37,37,37,41,1,36,37,37,37,37,37,117.952381,41.0,117.9761905,40.77310924,117.952381,40.83193277,118.0,41.0,0.0,0.0,0,0.0,117.8571429,40.69747899,0.171518489,0.184893784,0.113296617,0.000786782,0.0,0.0,0.077891424,1.077981651,0.660550459,0.004587156,0.0,0.0,0.45412844,0.612765957,0.004255319,0.0,0.0,0.421276596,0.006944444,0.0,0.0,0.6875,0.0,0.0,99.0,,,,21,32,4.0,2,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Pom_limit {
  // hudson.util.Iterators.limit(java.util.Iterator<? extends
  // T>,hudson.util.Iterators.CountingPredicate<? super T>)
  /**
   * Returns the elements in the base iterator until it hits any element that doesn't satisfy the
   * filter. Then the rest of the elements in the base iterator gets ignored.
   *
   * @since 1.485
   */
  // SNIPPET_STARTS
  public static <T> Iterator<T> limit(
      final Iterator<? extends T> base, final CountingPredicate<? super T> filter) {
    return new Iterator<T>() {

      private T next;

      private boolean end;

      private int index = 0;

      public boolean hasNext() {
        fetch();
        return next != null;
      }

      public T next() {
        fetch();
        T r = next;
        next = null;
        return r;
      }

      private void fetch() {
        if (next == null && !end) {
          if (base.hasNext()) {
            next = base.next();
            if (!filter.apply(index++, next)) {
              next = null;
              end = true;
            }
          } else {
            end = true;
          }
        }
      }

      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }
}
",0
1,6,1,4,0.238095238,0.0,0.115344853,0.016815234,0.47327381,0.5814,0.277174716,0.030481282,0.75,1.0,0.532713041,0.049229011,0.322193861,0.827956989,4.215189873,10,0.0,0,1.758333333,8,0.0,12.05376344,45,0.432031389,0.190692518,0.872278376,0.2,0.066666667,0.0,0.034482759,0.0,9.379310345,0.035714286,0.0,0.642857143,28.17857143,0.0,2.071428571,0.035714286,0.066666667,0.9,0.5,2.035714286,20,0,3,93,7,1,79,8,4.801703655,986.4507295,30,30,1,30,1,30,30,30,30,1,30,30,30,30,30,30,0.0,0.0,97.93333333,28.82828283,97.96666667,28.70707071,0.0,0.0,0.0,0.0,0,0.0,97.96666667,28.77777778,0.0,0.608258929,0.107142857,0.0,0.0,0.0,0.1015625,,,,,,,0.176146789,0.0,0.0,0.0,0.166972477,0.0,0.0,0.0,0.947916667,,,,,,,21,22,3.0,1,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$HibernateORM_extractSequenceValue {
  // org.hibernate.id.SequenceValueExtractor.extractSequenceValue(org.hibernate.engine.spi.SessionImplementor)
  // SNIPPET_STARTS
  public long extractSequenceValue(final SessionImplementor sessionImpl) {
    class WorkImpl implements Work {

      private long value;

      public void execute(Connection connection) throws SQLException {
        Session session = (Session) sessionImpl;
        Transaction transaction = session.beginTransaction();
        try {
          final PreparedStatement query =
              sessionImpl.getJdbcCoordinator().getStatementPreparer().prepareStatement(queryString);
          ResultSet resultSet =
              sessionImpl.getJdbcCoordinator().getResultSetReturn().extract(query);
          resultSet.next();
          value = resultSet.getLong(1);
          resultSet.close();
          transaction.commit();
        } catch (GenericJDBCException e) {
          transaction.rollback();
          throw e;
        }
        if (dialect instanceof DerbyDialect) {
          value--;
        }
      }
    }
    WorkImpl work = new WorkImpl();
    ((Session) sessionImpl).doWork(work);
    return work.value;
  }
}
",0
2,8,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
1,3,1,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
1,6,1,2,0.78125,1.0,138.0,0.0,0.828125,1.0,689.25,0.0,0.875,1.0,1843.0,0.0,0.539273679,0.838095238,5.488636364,10,1.714285714,7,3.239726027,16,100.0,6.723809524,37,0.0,1.0,0.0,0.1875,0.133333333,0.09375,0.315789474,0.0,10.27272727,0.0,10.0,0.461538462,38.84615385,0.0,2.115384615,0.192307692,0.5,0.28125,0.269230769,11.69230769,21,16,5,118,9,3,415,12,4.405288043,622.3752045,45,32,32,45,1,1,32,32,40,1,29,32,32,29,31,22,117.9777778,44.0,117.8666667,43.86554622,117.9333333,43.8907563,117.9555556,43.22689076,117.9777778,43.92436975,0,0.0,117.9111111,43.80672269,0.309165527,0.331737346,0.036935705,0.004103967,0.073871409,0.0,0.039671683,1.07300885,0.119469027,0.013274336,0.238938053,0.0,0.128318584,0.111340206,0.012371134,0.222680412,0.0,0.119587629,0.111111111,2.0,0.0,1.074074074,18.0,0.0,9.666666667,0.0,0.537037037,,21,42,1.0,4,8,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$OpenCMSCore_generateContent {
  // org.opencms.test.OpenCmsTestCase.generateContent(org.opencms.file.CmsObject,java.lang.String,int,double)
  /**
   * Generates a sub tree of folders with files.
   *
   * <p>
   *
   * @param cms the cms context
   * @param vfsFolder name of the folder
   * @param numberOfFiles the number of files to generate
   * @param fileTypeDistribution a percentage: x% binary files and (1-x)% text files
   * @return the number of files generated
   * @throws Exception if something goes wrong
   */
  // SNIPPET_STARTS
  public static int generateContent(
      CmsObject cms, String vfsFolder, int numberOfFiles, double fileTypeDistribution)
      throws Exception {
    int maxProps = 10;
    double propertyDistribution = 0.0;
    int writtenFiles = 0;
    int numberOfBinaryFiles = (int) (numberOfFiles * fileTypeDistribution);
    // generate binary files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/pdf-test-112.pdf"",
            vfsFolder,
            numberOfBinaryFiles,
            CmsResourceTypeBinary.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    // generate text files
    writtenFiles +=
        generateResources(
            cms,
            ""org/opencms/search/extractors/test1.html"",
            vfsFolder,
            numberOfFiles - numberOfBinaryFiles,
            CmsResourceTypePlain.getStaticTypeId(),
            maxProps,
            propertyDistribution);
    System.out.println("""" + writtenFiles + "" files written in Folder "" + vfsFolder);
    return writtenFiles;
  }
}
",0
1,3,3,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,3,2,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",0
1,3,3,2,0.875,0.0,388.0,0.0,0.992021277,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.058544081,0.931034483,3.235602094,10,0.0,0,2.57,21,0.0,13.90147783,37,0.0,1.0,0.0,0.0625,0.0625,0.625,0.032258065,0.125,7.809160305,0.0,8.8,0.1,59.6,0.0,4.366666667,2.3,0.21875,2.375,1.8,10.63333333,18,16,3,88,7,18,319,29,4.833892274,2464.827438,32,32,32,32,32,1,30,32,32,1,32,32,32,32,32,31,0.0,0.0,87.9375,30.82022472,88.0,31.0,87.84375,30.86516854,88.0,30.87640449,0,0.0,87.90625,30.87640449,0.0,0.508389262,0.008948546,0.008389262,0.168903803,0.0,0.137583893,,,,,,,0.01760176,0.01650165,0.332233223,0.0,0.270627063,0.9375,18.875,0.0,15.375,20.13333333,0.0,16.4,0.0,0.814569536,,43,288,1.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$K9_testFetchResponse {
  // com.fsck.k9.mail.store.imap.ImapResponseParserTest.testFetchResponse()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testFetchResponse() throws Exception {
    ImapResponseParser parser =
        createParser(
            ""* 1 FETCH (""
                + ""UID 23 ""
                + ""INTERNALDATE \""01-Jul-2015 12:34:56 +0200\"" ""
                + ""RFC822.SIZE 3456 ""
                + ""BODY[HEADER.FIELDS (date subject from)] \""<headers>\"" ""
                + ""FLAGS (\\Seen))\r\n"");
    ImapResponse response = parser.readResponse();
    assertEquals(3, response.size());
    assertEquals(""1"", response.getString(0));
    assertEquals(""FETCH"", response.getString(1));
    assertEquals(""UID"", response.getList(2).getString(0));
    assertEquals(23, response.getList(2).getNumber(1));
    assertEquals(""INTERNALDATE"", response.getList(2).getString(2));
    assertEquals(""01-Jul-2015 12:34:56 +0200"", response.getList(2).getString(3));
    assertEquals(""RFC822.SIZE"", response.getList(2).getString(4));
    assertEquals(3456, response.getList(2).getNumber(5));
    assertEquals(""BODY"", response.getList(2).getString(6));
    assertEquals(2, response.getList(2).getList(7).size());
    assertEquals(""HEADER.FIELDS"", response.getList(2).getList(7).getString(0));
    assertEquals(3, response.getList(2).getList(7).getList(1).size());
    assertEquals(""date"", response.getList(2).getList(7).getList(1).getString(0));
    assertEquals(""subject"", response.getList(2).getList(7).getList(1).getString(1));
    assertEquals(""from"", response.getList(2).getList(7).getList(1).getString(2));
    assertEquals(""<headers>"", response.getList(2).getString(8));
    assertEquals(""FLAGS"", response.getList(2).getString(9));
    assertEquals(1, response.getList(2).getList(10).size());
    assertEquals(""\\Seen"", response.getList(2).getList(10).getString(0));
  }
}
",0
1,3,3,3,0.5,0.0,0.000443066,0.145789743,0.558333333,0.499855,0.041586669,0.145789743,0.833333333,1.0,0.136095112,0.145789743,0.499673694,0.81512605,5.180952381,10,1.378151261,6,3.431818182,9,100.0,7.798319328,37,0.444122681,0.138675049,0.956182887,0.171428571,0.063829787,0.028571429,0.255813953,0.171428571,9.452054795,0.0625,0.0,0.25,28.90625,0.0,2.28125,0.0,0.0,0.8,0.59375,2.28125,32,0,2,111,9,0,165,17,4.821928084,1115.802425,47,35,35,47,34,35,35,35,46,1,35,1,1,35,35,35,114.9787234,46.0,114.9787234,45.81896552,114.9148936,45.75862069,0.0,0.0,115.0,44.81034483,115,46.0,114.9361702,45.78448276,0.350541746,0.432122371,0.021032505,0.0,0.010197578,0.005736138,0.072020395,1.232727273,0.06,0.0,0.029090909,0.016363636,0.205454545,0.048672566,0.0,0.02359882,0.013274336,0.166666667,0.0,0.484848485,0.272727273,3.424242424,,,,0.5625,7.0625,12.55555556,77,102,2.666666667,4,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$HibernateORM_collectionInfoString {
  // org.hibernate.pretty.MessageHelper.collectionInfoString(org.hibernate.persister.collection.CollectionPersister,org.hibernate.collection.spi.PersistentCollection,java.io.Serializable,org.hibernate.engine.spi.SharedSessionContractImplementor)
  /**
   * Generate an info message string relating to a particular managed collection. Attempts to
   * intelligently handle property-refs issues where the collection key is not the same as the owner
   * key.
   *
   * @param persister The persister for the collection
   * @param collection The collection itself
   * @param collectionKey The collection key
   * @param session The session
   * @return An info string, in the form [Foo.bars#1]
   */
  // SNIPPET_STARTS
  public static String collectionInfoString(
      CollectionPersister persister,
      PersistentCollection collection,
      Serializable collectionKey,
      SharedSessionContractImplementor session) {
    StringBuilder s = new StringBuilder();
    s.append('[');
    if (persister == null) {
      s.append(""<unreferenced>"");
    } else {
      s.append(persister.getRole());
      s.append('#');
      Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType();
      Serializable ownerKey;
      // TODO: Is it redundant to attempt to use the collectionKey,
      // or is always using the owner id sufficient?
      if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) {
        ownerKey = collectionKey;
      } else {
        Object collectionOwner = collection == null ? null : collection.getOwner();
        EntityEntry entry =
            collectionOwner == null
                ? null
                : session.getPersistenceContext().getEntry(collectionOwner);
        ownerKey = entry == null ? null : entry.getId();
      }
      s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()));
    }
    s.append(']');
    return s.toString();
  }
}
",0
1,3,2,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
1,3,2,4,0.5,0.647575,450.0,0.184262169,0.666666667,0.7752,1876.166667,0.458913899,0.75,1.0,5169.0,1.0,0.693161428,0.947368421,5.803571429,10,2.070175439,7,3.869047619,14,100.0,5.403508772,47,0.549649414,0.25819889,0.894427191,0.095238095,0.1,0.095238095,0.514285714,0.142857143,9.540540541,0.117647059,11.29411765,0.823529412,41.0,0.058823529,2.176470588,0.0,0.0,0.857142857,0.411764706,12.76470588,23,32,3,95,6,0,459,15,4.294508311,573.2580645,40,21,21,40,21,20,21,21,40,21,21,1,1,21,21,21,95.0,38.91666667,94.975,38.88541667,94.925,38.72916667,0.0,0.0,95.0,38.59375,0,0.0,94.95,38.82291667,0.524556617,0.231241473,0.039563438,0.0,0.012278308,0.0,0.040245566,0.44083225,0.075422627,0.0,0.023407022,0.0,0.076723017,0.171091445,0.0,0.053097345,0.0,0.174041298,0.0,0.310344828,0.0,1.017241379,,,,0.0,3.277777778,,39,53,2.5,1,9,"package FeatureExtraction.snippet_splitter_out;

public class StorageManager {
  // SNIPPET_STARTS
  protected StorageManager(final Context context) throws NullPointerException {
    if (context == null) {
      throw new NullPointerException(""No Context given"");
    }

    this.context = context;

    /*
     * 20101113/fiouzy:
     *
     * Here is where we define which providers are used, currently we only
     * allow the internal storage and the regular external storage.
     *
     * HTC Incredible storage and Samsung Galaxy S are omitted on purpose
     * (they're experimental and I don't have those devices to test).
     *
     *
     * !!! Make sure InternalStorageProvider is the first provider as it'll
     * be considered as the default provider !!!
     */
    final List<StorageProvider> allProviders =
        Arrays.asList(new InternalStorageProvider(), new ExternalStorageProvider());
    for (final StorageProvider provider : allProviders) {
      // check for provider compatibility
      if (provider.isSupported(context)) {
        // provider is compatible! proceeding

        provider.init(context);
        mProviders.put(provider.getId(), provider);
        mProviderLocks.put(provider, new SynchronizationAid());
      }
    }
  }
}
",0
1,3,3,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
2,5,4,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",0
1,2,2,3,0.75,0.5,0.0,0.0,0.75,0.5,234.9393939,0.006295344,0.75,0.5,1124.0,0.065286781,0.361793697,0.847222222,5.3125,11,0.0,0,2.585106383,14,0.0,4.819444444,45,0.522544307,0.142857143,1.0,0.066666667,0.0,0.2,0.02173913,0.177777778,9.333333333,0.0,0.0,0.666666667,27.08888889,0.0,2.066666667,0.044444444,0.022222222,1.088888889,0.333333333,1.666666667,22,0,3,96,7,1,153,13,4.923989992,1698.504973,45,45,45,1,45,1,45,45,34,1,45,45,45,42,45,45,0.0,0.0,100.9555556,43.80392157,100.9111111,43.66666667,0.0,0.0,100.9777778,43.89215686,0,0.0,100.9333333,43.71568627,0.0,0.57122905,0.091480447,0.0,0.028631285,0.0,0.108938547,,,,,,,0.160146699,0.0,0.050122249,0.0,0.190709046,0.0,0.312977099,0.0,1.190839695,,,,0.0,3.804878049,,75,78,6.4,0,21,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$SpringBatch_testFailureAndRecovery {
  // org.springframework.batch.container.jms.BatchMessageListenerContainerIntegrationTests.testFailureAndRecovery()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testFailureAndRecovery() throws Exception {
    final RetryTemplate retryTemplate = new RetryTemplate();
    retryTemplate.setRetryPolicy(new NeverRetryPolicy());
    container.setMessageListener(
        new MessageListener() {

          @Override
          public void onMessage(final Message msg) {
            try {
              RetryCallback<Message, Exception> callback =
                  new RetryCallback<Message, Exception>() {

                    @Override
                    public Message doWithRetry(RetryContext context) throws Exception {
                      try {
                        processed.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      throw new RuntimeException(""planned failure: "" + msg);
                    }
                  };
              RecoveryCallback<Message> recoveryCallback =
                  new RecoveryCallback<Message>() {

                    @Override
                    public Message recover(RetryContext context) {
                      try {
                        recovered.add(((TextMessage) msg).getText());
                      } catch (JMSException e) {
                        throw new IllegalStateException(e);
                      }
                      return msg;
                    }
                  };
              retryTemplate.execute(
                  callback, recoveryCallback, new DefaultRetryState(msg.getJMSMessageID()));
            } catch (Exception e) {
              throw (RuntimeException) e;
            }
          }
        });
    container.initializeProxy();
    container.start();
    jmsTemplate.convertAndSend(""queue"", ""foo"");
    assertEquals(""foo"", processed.poll(5, TimeUnit.SECONDS));
    assertEquals(""foo"", recovered.poll(5, TimeUnit.SECONDS));
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,4,4,5,0.5,0.0,0.0,0.000235046,0.644301471,0.125,0.007447626,0.012518701,0.75,0.5,0.014799154,0.026952701,0.133943856,0.822147651,5.261044177,11,0.0,0,3.882513661,24,0.0,7.372483221,38,0.266554252,0.074535599,0.778498944,0.244897959,0.020408163,0.244897959,0.020408163,0.0,8.457446809,0.083333333,9.125,0.479166667,51.41666667,0.041666667,3.916666667,0.0,0.0,1.142857143,0.979166667,10.6875,28,16,2,161,17,0,559,16,4.86697493,2275.889077,49,49,48,49,1,49,49,49,48,49,48,1,1,45,49,48,0.0,0.0,160.9795918,47.7962963,160.8367347,47.88888889,0.0,0.0,160.9795918,47.91975309,0,0.0,160.877551,47.77777778,0.0,0.51734104,0.036746491,0.0,0.178364988,0.0,0.082163501,,,,,,,0.071029529,0.0,0.344772546,0.0,0.158818835,0.0,4.853932584,0.0,2.235955056,,,,0.0,0.460648148,,110,156,2.5,1,31,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Phoenix_configure {
  // org.apache.phoenix.flume.serializer.BaseEventSerializer.configure(org.apache.flume.Context)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public void configure(Context context) {
    this.createTableDdl = context.getString(FlumeConstants.CONFIG_TABLE_DDL);
    this.fullTableName = context.getString(FlumeConstants.CONFIG_TABLE);
    final String zookeeperQuorum = context.getString(FlumeConstants.CONFIG_ZK_QUORUM);
    final String ipJdbcURL = context.getString(FlumeConstants.CONFIG_JDBC_URL);
    this.batchSize =
        context.getInteger(FlumeConstants.CONFIG_BATCHSIZE, FlumeConstants.DEFAULT_BATCH_SIZE);
    final String columnNames = context.getString(CONFIG_COLUMN_NAMES);
    final String headersStr = context.getString(CONFIG_HEADER_NAMES);
    final String keyGeneratorType = context.getString(CONFIG_ROWKEY_TYPE_GENERATOR);
    Preconditions.checkNotNull(
        this.fullTableName, ""Table name cannot be empty, please specify in the configuration file"");
    if (!Strings.isNullOrEmpty(zookeeperQuorum)) {
      this.jdbcUrl = QueryUtil.getUrl(zookeeperQuorum);
    }
    if (!Strings.isNullOrEmpty(ipJdbcURL)) {
      this.jdbcUrl = ipJdbcURL;
    }
    Preconditions.checkNotNull(
        this.jdbcUrl,
        ""Please specify either the zookeeper quorum or the jdbc url in the configuration file"");
    Preconditions.checkNotNull(
        columnNames, ""Column names cannot be empty, please specify in configuration file"");
    for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(columnNames)) {
      colNames.add(s);
    }
    if (!Strings.isNullOrEmpty(headersStr)) {
      for (String s : Splitter.on(DEFAULT_COLUMNS_DELIMITER).split(headersStr)) {
        headers.add(s);
      }
    }
    if (!Strings.isNullOrEmpty(keyGeneratorType)) {
      try {
        keyGenerator = DefaultKeyGenerator.valueOf(keyGeneratorType.toUpperCase());
        this.autoGenerateKey = true;
      } catch (IllegalArgumentException iae) {
        logger.error(
            ""An invalid key generator {} was specified in configuration file. Specify one of {}"",
            keyGeneratorType,
            DefaultKeyGenerator.values());
        Throwables.propagate(iae);
      }
    }
    logger.debug("" the jdbcUrl configured is {}"", jdbcUrl);
    logger.debug("" columns configured are {}"", colNames.toString());
    logger.debug("" headers configured are {}"", headersStr);
    logger.debug("" the keyGenerator configured is {} "", keyGeneratorType);
    doConfigure(context);
  }
}
",0
1,2,1,2,0.840909091,0.0,1843.0,0.0,0.920454545,0.5,1843.0,0.0,1.0,1.0,1843.0,0.0,0.078948036,0.62295082,6.114285714,11,0.0,0,4.815450644,16,0.0,4.68852459,24,0.0,1.0,0.0,0.268292683,0.0,0.073170732,0.023809524,1.268292683,4.25,0.0,14.24390244,0.170731707,44.56097561,0.0,4.097560976,0.756097561,0.951219512,0.12195122,0.365853659,17.46341463,29,16,2,140,16,10,716,30,4.213069461,527.2178972,41,41,40,1,41,1,1,41,26,1,39,41,41,41,41,1,0.0,0.0,140.0,39.87943262,140.0,40.0,0.0,0.0,139.902439,39.82978723,0,0.0,139.8780488,39.9787234,0.0,0.067323481,0.005473454,0.0,0.561029009,0.0,0.026819923,,,,,,,0.081300813,0.0,8.333333333,0.0,0.398373984,0.0,102.5,0.0,4.9,,,,0.0,0.047804878,,29,61,1.0,0,4,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$K9_testTextQuoteToHtmlBlockquote {
  // com.fsck.k9.message.html.HtmlConverterTest.testTextQuoteToHtmlBlockquote()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void testTextQuoteToHtmlBlockquote() {
    String message =
        ""Panama!\r\n""
            + ""\r\n""
            + ""Bob Barker <bob@aol.com> wrote:\r\n""
            + ""> a canal\r\n""
            + "">\r\n""
            + ""> Dorothy Jo Gideon <dorothy@aol.com> espoused:\r\n""
            + ""> >A man, a plan...\r\n""
            + ""> Too easy!\r\n""
            + ""\r\n""
            + ""Nice job :)\r\n""
            + "">> Guess!"";
    String result = HtmlConverter.textToHtml(message);
    writeToFile(result);
    assertEquals(
        ""<pre class=\""k9mail\"">""
            + ""Panama!<br />""
            + ""<br />""
            + ""Bob Barker &lt;bob@aol.com&gt; wrote:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + "" a canal<br />""
            + ""<br />""
            + "" Dorothy Jo Gideon &lt;dorothy@aol.com&gt; espoused:<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + ""A man, a plan...<br />""
            + ""</blockquote>""
            + "" Too easy!<br />""
            + ""</blockquote>""
            + ""<br />""
            + ""Nice job :)<br />""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;\"">""
            + ""<blockquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;\"">""
            + "" Guess!""
            + ""</blockquote>""
            + ""</blockquote>""
            + ""</pre>"",
        result);
  }
}
",0
1,3,1,4,0.75,0.0,138.0,0.0,0.791666667,0.5,138.0,0.0,0.833333333,1.0,138.0,0.0,0.571676016,0.56,6.704545455,12,0.22,1,3.547945205,11,100.0,4.0,37,0.589757105,0.365148372,1.0,0.192307692,0.133333333,0.192307692,0.043478261,0.153846154,4.104166667,0.181818182,0.0,0.636363636,18.18181818,0.045454545,2.181818182,0.181818182,0.307692308,0.576923077,0.227272727,2.636363636,10,0,2,104,13,2,74,6,4.742422788,765.709074,30,26,26,28,26,25,26,25,30,26,26,26,26,25,26,26,63.83333333,28.89230769,63.96666667,28.76923077,63.9,28.6,64.0,29.0,0.0,0.0,0,0.0,63.76666667,28.73846154,0.166371681,0.353982301,0.10619469,0.001769912,0.0,0.0,0.143362832,2.127659574,0.638297872,0.010638298,0.0,0.0,0.861702128,0.3,0.005,0.0,0.0,0.405,0.016666667,0.0,0.0,1.35,0.0,0.0,81.0,,,,11,11,2.5,1,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_4$Antlr4Master_removeFast {
  // org.antlr.v4.runtime.misc.Array2DHashSet.removeFast(T)
  // SNIPPET_STARTS
  public boolean removeFast(T obj) {
    if (obj == null) {
      return false;
    }
    int b = getBucket(obj);
    T[] bucket = buckets[b];
    if (bucket == null) {
      // no bucket
      return false;
    }
    for (int i = 0; i < bucket.length; i++) {
      T e = bucket[i];
      if (e == null) {
        // empty slot; not there
        return false;
      }
      if (comparator.equals(e, obj)) {
        // found it
        // shift all elements to the right down one
        System.arraycopy(bucket, i + 1, bucket, i, bucket.length - i - 1);
        bucket[bucket.length - 1] = null;
        n--;
        return true;
      }
    }
    return false;
  }
}
",0
4,10,7,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
1,2,1,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
1,3,2,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,2,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
1,3,2,4,0.75,0.0,0.0,0.000372806,0.916666667,0.0,0.003303383,0.002132878,1.0,0.0,0.009778013,0.003111493,0.53469938,0.842975207,4.311320755,10,0.388429752,2,1.950617284,12,100.0,10.70247934,37,0.370654145,0.097590007,0.866666667,0.117647059,0.175,0.088235294,0.205882353,0.0,8.455882353,0.148148148,9.62962963,0.555555556,40.0,0.0,2.518518519,0.037037037,0.117647059,0.970588235,0.481481481,12.03703704,21,20,2,95,9,1,377,11,4.486087257,1015.894114,40,34,34,40,1,34,29,34,34,1,33,34,34,34,34,28,93.4,39.0,95.95,38.79381443,96.0,38.73195876,96.0,39.0,95.95,38.79381443,0,0.0,95.9,38.69072165,0.169869331,0.365103766,0.044581091,0.00076864,0.100691776,0.0,0.082244427,2.149321267,0.262443439,0.004524887,0.592760181,0.0,0.484162896,0.122105263,0.002105263,0.275789474,0.0,0.225263158,0.017241379,2.25862069,0.0,1.844827586,131.0,0.0,107.0,0.0,0.816793893,,29,34,2.0,1,15,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$Phoenix_parseOptions {
  // org.apache.phoenix.mapreduce.AbstractBulkLoadTool.parseOptions(java.lang.String[])
  /**
   * Parses the commandline arguments, throws IllegalStateException if mandatory arguments are
   * missing.
   *
   * @param args supplied command line arguments
   * @return the parsed command line
   */
  // SNIPPET_STARTS
  protected CommandLine parseOptions(String[] args) {
    Options options = getOptions();
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      printHelpAndExit(""Error parsing command line options: "" + e.getMessage(), options);
    }
    if (cmdLine.hasOption(HELP_OPT.getOpt())) {
      printHelpAndExit(options, 0);
    }
    if (!cmdLine.hasOption(TABLE_NAME_OPT.getOpt())) {
      throw new IllegalStateException(
          TABLE_NAME_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    if (!cmdLine.getArgList().isEmpty()) {
      throw new IllegalStateException(""Got unexpected extra parameters: "" + cmdLine.getArgList());
    }
    if (!cmdLine.hasOption(INPUT_PATH_OPT.getOpt())) {
      throw new IllegalStateException(
          INPUT_PATH_OPT.getLongOpt() + "" is a mandatory "" + ""parameter"");
    }
    return cmdLine;
  }
}
",0
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
1,2,1,3,0.162860577,0.1831,1843.0,0.0,0.864031541,0.553744318,1843.0,0.0,1.0,1.0,1843.0,0.0,0.631089926,0.861702128,3.94047619,10,0.010638298,1,0.622047244,5,100.0,9.755319149,37,0.466578141,0.213200716,0.978019294,0.03125,0.029411765,0.125,0.088235294,0.0,9.682926829,0.064516129,12.64516129,0.193548387,31.16129032,0.0,1.322580645,0.0,0.34375,0.875,0.35483871,13.5483871,27,16,1,112,8,0,432,11,4.163395899,804.2346001,34,32,32,34,1,32,32,32,34,1,32,1,32,31,32,32,112.0,33.0,111.9705882,32.90265487,111.9411765,32.9380531,0.0,0.0,111.9705882,32.94690265,0,0.0,111.7941176,32.88495575,0.09039548,0.359698682,0.026365348,0.0,0.04613936,0.0,0.084745763,3.979166667,0.291666667,0.0,0.510416667,0.0,0.9375,0.073298429,0.0,0.128272251,0.0,0.235602094,0.0,1.75,0.0,3.214285714,,,,0.0,1.836734694,,7,19,2.0,1,6,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$OpenCMSCore_buttonHtml {
  // org.opencms.workplace.list.CmsListRadioMultiAction.buttonHtml(org.opencms.workplace.CmsWorkplace)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public String buttonHtml(CmsWorkplace wp) {
    if (!isVisible()) {
      return """";
    }
    if (isEnabled()) {
      String onClic =
          ""listRSelMAction('""
              + getListId()
              + ""','""
              + getId()
              + ""', '""
              + CmsStringUtil.escapeJavaScript(
                  wp.resolveMacros(getConfirmationMessage().key(wp.getLocale())))
              + ""', ""
              + CmsHtmlList.NO_SELECTION_MATCH_HELP_VAR
              + getId()
              + "", '""
              + getRelatedActionIds()
              + ""');"";
      return A_CmsHtmlIconButton.defaultButtonHtml(
          CmsHtmlIconButtonStyleEnum.SMALL_ICON_TEXT,
          getId(),
          getName().key(wp.getLocale()),
          getHelpText().key(wp.getLocale()),
          isEnabled(),
          getIconPath(),
          null,
          onClic);
    }
    return """";
  }
}
",0
1,2,1,3,0.5,0.0,0.001849894,0.000810109,0.626860119,0.375,0.001849894,0.000810109,0.875,1.0,0.001849894,0.000810109,0.527288437,0.795918367,4.582278481,10,0.479591837,2,1.937062937,8,100.0,9.642857143,45,0.593157773,0.316227766,1.0,0.222222222,0.0,0.259259259,0.035714286,0.074074074,9.2,0.148148148,9.185185185,0.62962963,38.44444444,0.0,2.222222222,0.111111111,0.037037037,1.074074074,0.62962963,10.07407407,22,16,3,119,8,1,315,12,4.402711552,1072.40958,31,26,25,31,27,27,1,20,28,1,25,25,27,24,27,16,118.9677419,29.64166667,118.9677419,29.73333333,119.0,29.53333333,119.0,29.5,0.0,0.0,0,0.0,118.8709677,29.65,0.117493473,0.480417755,0.064403829,0.002610966,0.0,0.0,0.098346388,4.088888889,0.548148148,0.022222222,0.0,0.0,0.837037037,0.134057971,0.005434783,0.0,0.0,0.204710145,0.040540541,0.0,0.0,1.527027027,0.0,0.0,37.66666667,,,,22,22,2.0,2,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Phoenix_evaluate {
  // org.apache.phoenix.expression.ModulusExpression.evaluate(org.apache.phoenix.schema.tuple.Tuple,org.apache.hadoop.hbase.io.ImmutableBytesWritable)
  // @Override // removed to allow compilation
  // SNIPPET_STARTS
  public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
    // get the dividend
    Expression dividendExpression = getDividendExpression();
    if (!dividendExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long dividend =
        dividendExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, dividendExpression.getSortOrder());
    // get the divisor
    Expression divisorExpression = getDivisorExpression();
    if (!divisorExpression.evaluate(tuple, ptr)) {
      return false;
    }
    if (ptr.getLength() == 0) {
      return true;
    }
    long divisor =
        divisorExpression
            .getDataType()
            .getCodec()
            .decodeLong(ptr, divisorExpression.getSortOrder());
    // actually perform modulus
    long remainder = dividend % divisor;
    // return the result, use encodeLong to avoid extra Long allocation
    byte[] resultPtr = new byte[PLong.INSTANCE.getByteSize()];
    getDataType().getCodec().encodeLong(remainder, resultPtr, 0);
    ptr.set(resultPtr);
    return true;
  }
}
",0
3,8,7,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
2,5,3,4,0.078947368,1.0,0.0,0.0,0.078947368,1.0,840.0,0.121918736,0.078947368,1.0,1858.0,0.516503114,0.335016221,0.630769231,4.47311828,11,0.007692308,1,2.473933649,20,100.0,8.392307692,45,0.352528938,0.114707867,0.983738754,0.090909091,0.160714286,0.127272727,0.021276596,0.090909091,6.142857143,0.02173913,9.391304348,0.782608696,31.95652174,0.02173913,2.130434783,0.043478261,0.090909091,0.709090909,0.717391304,10.93478261,29,24,3,105,12,1,522,14,4.37347151,1879.341322,56,55,55,55,55,55,44,55,55,55,55,55,55,55,55,44,105.0,54.36792453,104.9821429,54.76415094,104.9464286,54.55660377,102.625,54.80188679,105.0,55.0,105,55.0,104.9464286,54.79245283,0.034437086,0.398675497,0.12384106,0.001324503,0.001986755,0.001986755,0.104635762,11.57692308,3.596153846,0.038461538,0.057692308,0.057692308,3.038461538,0.310631229,0.003322259,0.004983389,0.004983389,0.262458472,0.010695187,0.016042781,0.016042781,0.844919786,1.5,1.5,79.0,1.0,52.66666667,52.66666667,33,36,4.1,0,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$Pom_get {
  // hudson.os.PosixAPI.get()
  // SNIPPET_STARTS
  @Deprecated
  public static synchronized org.jruby.ext.posix.POSIX get() {
    if (jnaPosix == null) {
      jnaPosix =
          org.jruby.ext.posix.POSIXFactory.getPOSIX(
              new // Change POSIXHandler signature
              Pom.POSIXHandler() {

                public void error(ERRORS errors, String s) throws PosixException {
                  // changed ERRORS signature, added throws
                  throw new PosixException(s, errors);
                }

                public void unimplementedError(String s) {
                  throw new UnsupportedOperationException(s);
                }

                public void warn(WARNING_ID warning_id, String s, Object... objects) {
                  LOGGER.fine(s);
                }

                public boolean isVerbose() {
                  return true;
                }

                public File getCurrentWorkingDirectory() {
                  return new File(""."").getAbsoluteFile();
                }

                public String[] getEnv() {
                  Map<String, String> envs = System.getenv();
                  String[] envp = new String[envs.size()];
                  int i = 0;
                  for (Map.Entry<String, String> e : envs.entrySet()) {
                    envp[i++] = e.getKey() + '+' + e.getValue();
                  }
                  return envp;
                }

                public InputStream getInputStream() {
                  return System.in;
                }

                public PrintStream getOutputStream() {
                  return System.out;
                }

                public int getPID() {
                  // TODO
                  return 0;
                }

                public PrintStream getErrorStream() {
                  return System.err;
                }
              },
              true);
    }
    return jnaPosix;
  }
}
",0
1,3,2,3,0.5,0.0,388.0,0.0,0.754123264,0.0,388.0,0.0,1.0,0.0,388.0,0.0,0.577517688,0.635294118,5.525862069,10,0.017647059,3,3.311111111,18,100.0,4.623529412,37,0.299252801,1.0,0.299252801,0.142857143,0.064516129,0.071428571,0.037037037,0.0,8.725490196,0.0,8.153846154,0.230769231,55.80769231,0.0,3.923076923,1.615384615,0.178571429,0.964285714,1.346153846,11.92307692,53,16,3,157,11,15,313,17,5.129361476,1054.581348,31,28,28,31,1,1,1,28,31,1,28,28,28,1,28,26,0.0,0.0,126.0,29.8976378,125.8709677,29.84251969,0.0,0.0,126.0,29.99212598,0,0.0,125.9032258,29.92913386,0.0,0.352870813,0.016148325,0.0,0.408492823,0.0,0.062799043,,,,,,,0.045762712,0.0,1.157627119,0.0,0.177966102,0.0,25.2962963,0.0,3.888888889,,,,0.0,0.153733529,,70,192,2.0,0,22,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$K9_open_withXoauth2Extension_shouldThrowOnMultipleFailure {
  // com.fsck.k9.mail.transport.SmtpTransportTest.open_withXoauth2Extension_shouldThrowOnMultipleFailure()
  // @Test // Removed to allow compilation
  // SNIPPET_STARTS
  public void open_withXoauth2Extension_shouldThrowOnMultipleFailure() throws Exception {
    MockSmtpServer server = new MockSmtpServer();
    server.output(""220 localhost Simple Mail Transfer Service Ready"");
    server.expect(""EHLO localhost"");
    server.output(""250-localhost Hello client.localhost"");
    server.output(""250 AUTH XOAUTH2"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG9sZFRva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    server.expect(""AUTH XOAUTH2 dXNlcj11c2VyAWF1dGg9QmVhcmVyIG5ld1Rva2VuAQE="");
    server.output(""334 "" + XOAuth2ChallengeParserTest.STATUS_400_RESPONSE);
    server.expect("""");
    server.output(""535-5.7.1 Username and Password not accepted. Learn more at"");
    server.output(
        ""535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"");
    SmtpTransport transport =
        startServerAndCreateSmtpTransport(server, AuthType.XOAUTH2, ConnectionSecurity.NONE);
    try {
      transport.open();
      fail(""Exception expected"");
    } catch (AuthenticationFailedException e) {
      assertEquals(
          ""Negative SMTP reply: 535 5.7.1 http://support.google.com/mail/bin/answer.py?answer=14257 hx9sm5317360pbc.68"",
          e.getMessage());
    }
    server.verifyConnectionStillOpen();
    server.verifyInteractionCompleted();
  }
}
",0
1,4,4,2,0.75,0.0,2363.0,0.010923062,0.833333333,0.25,3635.333333,0.026598577,1.0,1.0,7214.0,0.049229011,0.543387294,0.827338129,3.698275862,12,0.446043165,2,8.671232877,29,100.0,10.74820144,41,0.0,1.0,0.0,0.310344828,0.1875,0.275862069,0.041666667,0.0,6.912621359,0.0,0.0,0.304347826,41.60869565,0.0,4.47826087,1.130434783,0.0,1.0,0.826086957,2.695652174,33,0,3,89,10,4,105,14,4.7742856,1128.663069,32,29,29,32,1,1,29,29,32,1,29,29,1,28,28,29,91.0,29.94565217,91.0,30.76086957,90.9375,30.73913043,0.0,0.0,90.96875,30.92391304,0,0.0,90.84375,30.80434783,0.059869036,0.566884939,0.031805426,0.0,0.145930776,0.0,0.110383536,9.46875,0.53125,0.0,2.4375,0.0,1.84375,0.056105611,0.0,0.257425743,0.0,0.194719472,0.0,4.588235294,0.0,3.470588235,,,,0.0,0.756410256,,33,43,1.0,0,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$SpringBatch_testOperationWithDirectCloseCall {
  // org.springframework.batch.item.database.ExtendedConnectionDataSourceProxyTests.testOperationWithDirectCloseCall()
  // @Test // removed to allow compilation
  // SNIPPET_STARTS
  public void testOperationWithDirectCloseCall() throws SQLException {
    Connection con = mock(Connection.class);
    DataSource ds = mock(DataSource.class);
    // con1
    when(ds.getConnection()).thenReturn(con);
    con.close();
    // con2
    when(ds.getConnection()).thenReturn(con);
    con.close();
    final ExtendedConnectionDataSourceProxy csds = new ExtendedConnectionDataSourceProxy(ds);
    Connection con1 = csds.getConnection();
    csds.startCloseSuppression(con1);
    Connection con1_1 = csds.getConnection();
    assertSame(""should be same connection"", con1_1, con1);
    // no mock call for this - should be suppressed
    con1_1.close();
    Connection con1_2 = csds.getConnection();
    assertSame(""should be same connection"", con1_2, con1);
    Connection con2 = csds.getConnection();
    assertNotSame(""shouldn't be same connection"", con2, con1);
    csds.stopCloseSuppression(con1);
    assertTrue(""should be able to close connection"", csds.shouldClose(con1));
    con1_1 = null;
    con1_2 = null;
    con1.close();
    assertTrue(""should be able to close connection"", csds.shouldClose(con2));
    con2.close();
  }
}
",0
1,3,2,6,0.217948718,0.0,0.115344853,0.016815234,0.511243873,0.457742593,0.393590312,0.038424419,0.9,1.0,0.532713041,0.049229011,0.201767042,0.826271186,5.146226415,10,0.11440678,1,3.248251748,17,100.0,8.080508475,45,0.437469558,0.110431526,1.0,0.25,0.031746032,0.316666667,0.016949153,0.1,10.07857143,0.068965517,0.0,0.5,33.43103448,0.068965517,2.413793103,0.086206897,0.133333333,1.066666667,0.586206897,2.724137931,38,0,3,132,13,2,224,24,4.812609729,2511.159476,63,60,59,62,60,60,60,59,62,60,60,60,60,60,60,60,136.0,61.83211679,135.968254,61.65693431,135.5555556,61.7810219,135.7460317,62.0,136.0,61.89051095,0,0.0,135.9047619,61.66423358,0.050387597,0.580964686,0.047803618,0.00129199,0.032299742,0.0,0.108527132,11.52991453,0.948717949,0.025641026,0.641025641,0.0,2.153846154,0.082283173,0.00222387,0.055596738,0.0,0.186805041,0.027027027,0.675675676,0.0,2.27027027,25.0,0.0,84.0,0.0,3.36,,92,94,4.5,2,38,"package snippet_splitter_out.ds_6;

public class ds_6_snip_3$HibernateORM_execute {
  // org.hibernate.hql.spi.id.TableBasedUpdateHandlerImpl.execute(org.hibernate.engine.spi.SharedSessionContractImplementor,org.hibernate.engine.spi.QueryParameters)
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public int execute(SharedSessionContractImplementor session, QueryParameters queryParameters)
      throws Exception {
    // throws Exception added to allow compilation
    prepareForUse(targetedPersister, session);
    try {
      // First, save off the pertinent ids, as the return value
      PreparedStatement ps = null;
      int resultCount = 0;
      try {
        try {
          ps =
              session
                  .getJdbcCoordinator()
                  .getStatementPreparer()
                  .prepareStatement(idInsertSelect, false);
          int position = 1;
          position += handlePrependedParametersOnIdSelection(ps, session, position);
          for (ParameterSpecification parameterSpecification : idSelectParameterSpecifications) {
            position += parameterSpecification.bind(ps, queryParameters, session, position);
          }
          resultCount = session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
        } finally {
          if (ps != null) {
            session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
            session.getJdbcCoordinator().afterStatementExecution();
          }
        }
      } catch (SQLException e) {
        throw session
            .getJdbcServices()
            .getSqlExceptionHelper()
            .convert(e, ""could not insert/select ids for bulk update"", idInsertSelect);
      }
      // Start performing the updates
      for (int i = 0; i < updates.length; i++) {
        if (updates[i] == null) {
          continue;
        }
        try {
          try {
            ps =
                session
                    .getJdbcCoordinator()
                    .getStatementPreparer()
                    .prepareStatement(updates[i], false);
            if (assignmentParameterSpecifications[i] != null) {
              // jdbc params are 1-based
              int position = 1;
              for (int x = 0; x < assignmentParameterSpecifications[i].length; x++) {
                position +=
                    assignmentParameterSpecifications[i][x].bind(
                        ps, queryParameters, session, position);
              }
              handleAddedParametersOnUpdate(ps, session, position);
            }
            session.getJdbcCoordinator().getResultSetReturn().executeUpdate(ps);
          } finally {
            if (ps != null) {
              session.getJdbcCoordinator().getLogicalConnection().getResourceRegistry().release(ps);
              session.getJdbcCoordinator().afterStatementExecution();
            }
          }
        } catch (SQLException e) {
          throw session
              .getJdbcServices()
              .getSqlExceptionHelper()
              .convert(e, ""error performing bulk update"", updates[i]);
        }
      }
      return resultCount;
    } finally {
      releaseFromUse(targetedPersister, session);
    }
  }
}
",0
1,3,2,5,0.841463415,0.0,10.0,0.011211951,0.877865854,0.0,399.6666667,0.025343482,0.9,0.0,1843.0,0.041675947,0.165990993,0.777777778,5.52238806,12,0.126984127,1,2.705685619,15,100.0,6.162698413,37,0.372924954,0.064549722,1.0,0.362068966,0.05,0.137931034,0.017857143,0.189655172,8.10625,0.090909091,0.0,0.581818182,33.2,0.018181818,2.909090909,0.127272727,0.068965517,1.017241379,0.690909091,2.545454545,22,0,3,95,11,1,196,21,4.958407849,2752.545713,60,58,58,60,58,58,1,55,56,58,54,58,58,56,56,55,97.0,58.86734694,96.9,58.69387755,96.91666667,58.55102041,97.0,59.0,97.0,58.86734694,0,0.0,96.83333333,58.58163265,0.055264412,0.604573606,0.064792758,0.000476417,0.02334445,0.0,0.11291091,10.93965517,1.172413793,0.00862069,0.422413793,0.0,2.043103448,0.107171001,0.000788022,0.038613081,0.0,0.186761229,0.007352941,0.360294118,0.0,1.742647059,49.0,0.0,237.0,0.0,4.836734694,,46,49,3.0,0,37,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Antlr4Master_process {
  // org.antlr.v4.gui.TestRig.process()
  // SNIPPET_STARTS
  public void process() throws Exception {
    // System.out.println(""exec ""+grammarName+"".""+startRuleName);
    String lexerName = grammarName + ""Lexer"";
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class<? extends Lexer> lexerClass = null;
    try {
      lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
    } catch (java.lang.ClassNotFoundException cnfe) {
      // might be pure lexer grammar; no Lexer suffix then
      lexerName = grammarName;
      try {
        lexerClass = cl.loadClass(lexerName).asSubclass(Lexer.class);
      } catch (ClassNotFoundException cnfe2) {
        System.err.println(""Can't load "" + lexerName + "" as lexer or parser"");
        return;
      }
    }
    Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
    Lexer lexer = lexerCtor.newInstance((CharStream) null);
    Class<? extends Parser> parserClass = null;
    Parser parser = null;
    if (!startRuleName.equals(LEXER_START_RULE_NAME)) {
      String parserName = grammarName + ""Parser"";
      parserClass = cl.loadClass(parserName).asSubclass(Parser.class);
      Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
      parser = parserCtor.newInstance((TokenStream) null);
    }
    Charset charset = (encoding == null ? Charset.defaultCharset() : Charset.forName(encoding));
    if (inputFiles.size() == 0) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8Stream(System.in);
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      process(lexer, parserClass, parser, charStream);
      return;
    }
    for (String inputFile : inputFiles) {
      CharStream charStream;
      if (charset.equals(StandardCharsets.UTF_8)) {
        charStream = CharStreams.createWithUTF8(Paths.get(inputFile));
      } else {
        try (InputStreamReader r = new InputStreamReader(System.in, charset)) {
          charStream = new ANTLRInputStream(r);
        }
      }
      if (inputFiles.size() > 1) {
        System.err.println(inputFile);
      }
      process(lexer, parserClass, parser, charStream);
    }
  }
}
",0
4,10,10,3,1.0,0.0,0.0,0.005760917,1.0,0.0,198.5,0.12177524,1.0,0.0,336.0,0.237789563,0.466613442,0.929577465,4.0,12,0.577464789,2,1.843478261,10,100.0,12.29577465,57,0.505529192,0.20519567,1.0,0.166666667,0.0,0.033333333,0.032258065,0.333333333,8.219512195,0.2,16.8,0.533333333,34.93333333,0.0,1.366666667,0.0,0.0,0.866666667,0.2,17.83333333,19,64,2,91,4,0,564,9,3.650889722,781.3821247,34,30,30,34,30,30,30,29,1,1,29,1,1,29,30,30,60.97058824,32.96774194,60.85294118,32.85483871,61.0,32.79032258,0.0,0.0,0.0,0.0,0,0.0,60.88235294,32.82258065,0.139917695,0.277366255,0.067489712,0.0,0.0,0.0,0.074897119,1.982352941,0.482352941,0.0,0.0,0.0,0.535294118,0.243323442,0.0,0.0,0.0,0.270029674,0.0,0.0,0.0,1.109756098,,,,,,,40,55,4.333333333,0,20,"package snippet_splitter_out.ds_6;

public class ds_6_snip_2$Pom__getRuns {
  // hudson.model.ViewJob._getRuns()
  // SNIPPET_STARTS
  protected SortedMap<Integer, RunT> _getRuns() {
    if (notLoaded || runs == null) {
      // if none is loaded yet, do so immediately.
      synchronized (this) {
        if (runs == null) runs = new RunMap<RunT>();
        if (notLoaded) {
          notLoaded = false;
          _reload();
        }
      }
    }
    if (nextUpdate < System.currentTimeMillis()) {
      if (!reloadingInProgress) {
        // schedule a new reloading operation.
        // we don't want to block the current thread,
        // so reloading is done asynchronously.
        reloadingInProgress = true;
        Set<ViewJob> reloadQueue;
        synchronized (ViewJob.class) {
          if (reloadThread == null) {
            reloadThread = new ReloadThread();
            reloadThread.start();
          }
          reloadQueue = reloadThread.reloadQueue;
        }
        synchronized (reloadQueue) {
          reloadQueue.add(this);
          reloadQueue.notify();
        }
      }
    }
    return runs;
  }
}
",0
1,3,1,4,0.833333333,0.0,0.0,0.00015974,0.87191358,0.555555556,0.004690803,0.277836217,1.0,1.0,0.024841438,1.0,0.258783221,0.897777778,4.714285714,12,0.035555556,1,2.111888112,14,100.0,7.475555556,45,0.541440322,0.096225045,0.949546915,0.243243243,0.052631579,0.513513514,0.027777778,0.243243243,10.28947368,0.142857143,14.97142857,0.714285714,59.77142857,0.057142857,3.257142857,0.085714286,0.0,1.189189189,0.771428571,18.08571429,22,28,3,125,9,1,637,18,4.484444409,2058.32621,38,37,37,38,37,37,37,37,33,37,37,37,1,37,37,37,120.0,37.0,120.0,36.84297521,119.8684211,36.84297521,119.7368421,36.47933884,0.0,0.0,0,0.0,119.8684211,36.84297521,0.012275732,0.553824363,0.047686497,0.001416431,0.0,0.0,0.085930123,45.11538462,3.884615385,0.115384615,0.0,0.0,7.0,0.086104007,0.002557545,0.0,0.0,0.155157715,0.02970297,0.0,0.0,1.801980198,0.0,0.0,60.66666667,,,,32,33,3.5,5,23,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Phoenix_doDropSchema {
  // org.apache.phoenix.coprocessor.MetaDataEndpointImpl.doDropSchema(long,java.lang.String,byte[],java.util.List<org.apache.hadoop.hbase.client.Mutation>,java.util.List<org.apache.phoenix.hbase.index.util.ImmutableBytesPtr>)
  // SNIPPET_STARTS
  private MetaDataMutationResult doDropSchema(
      long clientTimeStamp,
      String schemaName,
      byte[] key,
      List<Mutation> schemaMutations,
      List<ImmutableBytesPtr> invalidateList)
      throws Exception {
    PSchema schema =
        loadSchema(env, key, new ImmutableBytesPtr(key), clientTimeStamp, clientTimeStamp);
    boolean areTablesExists = false;
    if (schema == null) {
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
    }
    if (schema.getTimeStamp() < clientTimeStamp) {
      Region region = env.getRegion();
      Scan scan =
          MetaDataUtil.newTableRowsScan(
              SchemaUtil.getKeyForSchema(null, schemaName), MIN_TABLE_TIMESTAMP, clientTimeStamp);
      List<Cell> results = Lists.newArrayList();
      try (RegionScanner scanner = region.getScanner(scan)) {
        scanner.next(results);
        if (results.isEmpty()) {
          // Should not be possible
          return new MetaDataMutationResult(
              MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
        }
        do {
          Cell kv = results.get(0);
          if (Bytes.compareTo(
                  kv.getRowArray(), kv.getRowOffset(), kv.getRowLength(), key, 0, key.length)
              != 0) {
            areTablesExists = true;
            break;
          }
          results.clear();
          scanner.next(results);
        } while (!results.isEmpty());
      }
      if (areTablesExists) {
        return new MetaDataMutationResult(
            MutationCode.TABLES_EXIST_ON_SCHEMA,
            schema,
            EnvironmentEdgeManager.currentTimeMillis());
      }
      return new MetaDataMutationResult(
          MutationCode.SCHEMA_ALREADY_EXISTS, schema, EnvironmentEdgeManager.currentTimeMillis());
    }
    return new MetaDataMutationResult(
        MutationCode.SCHEMA_NOT_FOUND, EnvironmentEdgeManager.currentTimeMillis(), null);
  }
}
",0
2,4,2,5,0.5,0.0,1.0,0.0,0.75,0.0,1980.166667,0.207777565,0.916666667,0.0,4512.0,0.511819486,0.308735877,0.871794872,4.774774775,9,0.0,0,2.079754601,10,0.0,6.974358974,37,0.436069397,0.113960576,0.872871561,0.15625,0.0625,0.1875,0.032258065,0.03125,7.736111111,0.1,11.73333333,0.666666667,39.36666667,0.0,2.4,0.0,0.0625,1.125,0.466666667,14.1,18,20,3,101,12,0,423,16,4.171073509,1109.20479,32,32,32,32,32,32,32,32,28,1,28,1,32,29,31,1,0.0,0.0,100.9375,30.83333333,100.90625,30.90196078,0.0,0.0,101.0,30.83333333,0,0.0,100.84375,30.62745098,0.0,0.401354784,0.067739204,0.0,0.088907705,0.0,0.094834886,,,,,,,0.168776371,0.0,0.221518987,0.0,0.23628692,0.0,1.3125,0.0,1.4,,,,0.0,1.066666667,,22,26,3.0,0,16,"package snippet_splitter_out.ds_6;

public class ds_6_snip_5$CarReport_downloadFile {
  // me.kuehle.carreport.util.sync.provider.DropboxSyncProvider.downloadFile()
  // @Override // Removed to allow compilation
  // SNIPPET_STARTS
  public void downloadFile() throws SyncIoException, SyncParseException {
    File localFile = getLocalFile();
    File tempFile = new File(Application.getContext().getCacheDir(), getClass().getSimpleName());
    FileOutputStream outputStream = null;
    try {
      outputStream = new FileOutputStream(tempFile);
      mDbxClient.files().download(""/"" + localFile.getName()).download(outputStream);
      if (!FileCopyUtil.copyFile(tempFile, localFile)) {
        throw new IOException();
      }
    } catch (NetworkIOException e) {
      throw new SyncIoException(e);
    } catch (DbxException | IOException e) {
      throw new SyncParseException(e);
    } finally {
      if (outputStream != null) {
        try {
          outputStream.close();
        } catch (IOException e) {
          Log.e(TAG, ""Could not close output stream after downloading file."", e);
        }
      }
      if (!tempFile.delete()) {
        Log.w(TAG, ""Could not delete temp file after downloading."");
      }
    }
  }
}
",0
1,2,1,3,1.0,0.0,1843.0,0.0,1.0,0.276135833,1843.0,0.0,1.0,0.833333333,1843.0,0.0,0.292099744,0.744186047,4.056603774,9,0.0,0,1.074712644,10,0.0,9.124031008,37,0.396418915,0.125988158,0.742307489,0.117647059,0.117647059,0.029411765,0.032258065,0.029411765,9.615384615,0.066666667,11.06666667,0.666666667,40.73333333,0.0,2.166666667,0.0,0.0,1.176470588,0.7,12.5,31,16,2,88,6,0,375,8,4.256586399,1219.544534,34,33,34,34,34,34,1,34,33,1,33,1,1,34,34,1,0.0,0.0,87.94117647,32.82022472,87.94117647,32.71910112,0.0,0.0,0.0,0.0,0,0.0,87.85294118,32.79775281,0.0,0.511456628,0.078559738,0.0,0.0,0.0,0.103109656,,,,,,,0.1536,0.0,0.0,0.0,0.2016,0.0,0.0,0.0,1.3125,,,,,,,57,62,2.8,0,17,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$CarReport_save {
  // me.kuehle.carreport.gui.dialog.EditFuelTypeDialogFragment.save()
  // SNIPPET_STARTS
  private boolean save() {
    FormValidator validator = new FormValidator();
    validator.add(new FormFieldNotEmptyValidator(mEdtName));
    validator.add(
        new AbstractFormFieldValidator(mEdtName) {

          // @Override // Removed to allow compilation
          protected boolean isValid() {
            String name = mEdtName.getText().toString();
            return !mOtherFuelTypeNames.contains(name);
          }

          // @Override // Removed to allow compilation
          protected int getMessage() {
            return R.string.validate_error_fuel_type_exists;
          }
        });
    validator.add(new FormFieldNotEmptyValidator(mEdtCategory));
    if (validator.validate()) {
      FuelTypeContentValues values = new FuelTypeContentValues();
      values.putName(mEdtName.getText().toString());
      values.putCategory(mEdtCategory.getText().toString());
      if (mFuelType == null) {
        values.insert(getActivity().getContentResolver());
      } else {
        FuelTypeSelection where = new FuelTypeSelection().id(mFuelType.getId());
        values.update(getActivity().getContentResolver(), where);
      }
      return true;
    } else {
      return false;
    }
  }
}
",0
4,5,2,4,0.75,0.0,0.0,0.000166586,0.910714286,0.80952381,1032.666667,0.180915355,1.0,1.0,2755.0,0.511819486,0.243095979,0.948387097,5.428571429,11,1.787096774,5,6.613065327,24,100.0,7.283870968,45,0.662238766,0.23570226,0.9258201,0.075,0.176470588,0.175,0.225,0.5,8.75257732,0.096774194,12.51612903,0.483870968,49.35483871,0.096774194,3.129032258,0.0,0.175,0.9,0.580645161,14.93548387,20,24,2,86,7,0,586,20,4.395732997,1529.884664,51,39,39,51,38,40,38,38,46,40,38,1,40,40,39,31,85.96078431,50.0,85.92156863,49.64367816,85.98039216,49.70114943,0.0,0.0,86.0,49.89655172,0,0.0,85.80392157,49.73563218,0.230382294,0.401911469,0.027162978,0.0,0.038229376,0.0,0.075955734,1.744541485,0.11790393,0.0,0.165938865,0.0,0.329694323,0.067584481,0.0,0.095118899,0.0,0.188986233,0.0,1.407407407,0.0,2.796296296,,,,0.0,1.986842105,,50,67,2.666666667,3,18,"package snippet_splitter_out.ds_6;

public class ds_6_snip_1$Antlr4Master_analyze {
  // org.antlr.mojo.antlr4.GrammarDependencies.analyze(java.util.Set<java.io.File>,java.util.Set<java.io.File>,org.antlr.v4.Tool)
  /**
   * Performs dependency analysis for the given grammar files.
   *
   * @param grammarFiles the grammar files.
   * @param importGrammarFiles the import grammar files.
   * @param tool the tool to use.
   * @return self-reference.
   */
  // SNIPPET_STARTS
  public GrammarDependencies analyze(
      Set<File> grammarFiles, Set<File> importGrammarFiles, Tool tool) throws IOException {
    log.debug(""Analysing grammar dependencies "" + sourceDirectory);
    // for dependency analysis we require all grammars
    Collection<File> grammarsAndTokens = new HashSet<File>();
    grammarsAndTokens.addAll(importGrammarFiles);
    grammarsAndTokens.addAll(grammarFiles);
    for (File grammarFile : grammarsAndTokens) {
      // .tokens files must not be parsed, they can just be referenced
      if (!grammarFile.getName().endsWith("".tokens"")) analyse(grammarFile, grammarsAndTokens, tool);
    }
    for (File grammarFile : grammarFiles) {
      Collection<String> usages = findUsages(getRelativePath(grammarFile));
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + getRelativePath(grammarFile) + "" used by "" + usages);
      }
    }
    for (File grammarFile : importGrammarFiles) {
      // imported files are not allowed to be qualified
      Collection<String> usages = findUsages(grammarFile.getName());
      if (!usages.isEmpty()) {
        grammars.put(
            grammarFile,
            new AbstractMap.SimpleImmutableEntry<byte[], Collection<String>>(
                MojoUtils.checksum(grammarFile), usages));
        log.debug(""  "" + grammarFile.getName() + "" imported by "" + usages);
      }
    }
    return this;
  }
}
",0
